

' con errores desconocidos!!!! --> *);(HC_ANY_ARGS); callback As (HC_CDECL Ptr)  pero con ANY PTR funciona
Declare Sub HC_PShow_Net_Driver     Cdecl Alias "HC_PShow_Net_Driver"    (count As HC_INTEGER, keys As HC_KEY Ptr, action As Any Ptr) 
Declare Sub HC_Show_Callback_Name   Cdecl Alias "HC_Show_Callback_Name"  (nombre As HC_STRING, CALLBACK As Any Ptr) 
Declare Sub HC_Define_Callback_Name Cdecl Alias "HC_Define_Callback_Name"(nombre As HC_STRING, CALLBACK As Any Ptr) 
 
 
Declare Sub HC_Append_Texture_Matrix Cdecl Alias "HC_Append_Texture_Matrix"(array As HC_SINGLE Ptr) 
Declare Sub HC_QAppend_Texture_Matrix Cdecl Alias "HC_QAppend_Texture_Matrix"(segment As HC_STRING, array As HC_SINGLE Ptr) 
Declare Sub HC_Begin_Callback_Name_Search Cdecl Alias "HC_Begin_Callback_Name_Search"() 
Declare Sub HC_Show_Callback_Name_Count Cdecl Alias "HC_Show_Callback_Name_Count"(count As HC_INTEGER Ptr) 
Declare Function HC_Find_Callback_Name Cdecl Alias "HC_Find_Callback_Name"(nombre As HC_STRING) As HC_BOOLEAN 
Declare Sub HC_End_Callback_Name_Search Cdecl Alias "HC_End_Callback_Name_Search"() 
Declare Sub HC_Begin_Local_Texture_Search Cdecl Alias "HC_Begin_Local_Texture_Search"() 
Declare Sub HC_Begin_Shell_Selection Cdecl Alias "HC_Begin_Shell_Selection"() 
Declare Sub HC_End_Shell_Selection Cdecl Alias "HC_End_Shell_Selection"() 
Declare Sub HC_Begin_Texture_Search Cdecl Alias "HC_Begin_Texture_Search"() 
Declare Sub HC_Show_Texture_Count Cdecl Alias "HC_Show_Texture_Count"(count As HC_INTEGER Ptr) 
Declare Function HC_Find_Texture Cdecl Alias "HC_Find_Texture"(nombre As HC_STRING) As HC_BOOLEAN 
Declare Sub HC_End_Texture_Search Cdecl Alias "HC_End_Texture_Search"() 
Declare Function HC_Compute_Circumcuboid Cdecl Alias "HC_Compute_Circumcuboid"(segment As HC_STRING, min As HC_POINT Ptr, max As HC_POINT Ptr) As HC_BOOLEAN 
Declare Function HC_Compute_Circumcuboid_By_Key Cdecl Alias "HC_Compute_Circumcuboid_By_Key"(key As HC_KEY, min As HC_POINT Ptr, max As HC_POINT Ptr) As HC_BOOLEAN 
Declare Function HC_Compute_Circumsphere_By_Key Cdecl Alias "HC_Compute_Circumsphere_By_Key"(key As HC_KEY, center As HC_POINT Ptr, radius As HC_SINGLE Ptr) As HC_BOOLEAN 
Declare Sub HC_Compute_Convex_Hull Cdecl Alias "HC_Compute_Convex_Hull"(pcount As HC_INTEGER, puntos As HC_POINT Ptr, fcount As HC_INTEGER Ptr, face_list As HC_INTEGER Ptr) 
Declare Function HC_Compute_Coordinates_By_Path Cdecl Alias "HC_Compute_Coordinates_By_Path"(count As HC_INTEGER, keys As HC_KEY Ptr, in_system As HC_STRING, in_position As HC_POINT Ptr, out_system As HC_STRING, out_position As HC_POINT Ptr) As HC_BOOLEAN 
Declare Function HC_DCompute_Coordinates Cdecl Alias "HC_DCompute_Coordinates"(segment As HC_STRING, in_system As HC_STRING, in_position As HC_POINT Ptr, out_system As HC_STRING, out_position As HC_POINT Ptr) As HC_BOOLEAN 
Declare Function HC_Compute_Intersect_Polyline Cdecl Alias "HC_Compute_Intersect_Polyline"(pcount1 As HC_INTEGER, points1 As HC_POINT Ptr, flist_length1 As HC_INTEGER, face_list1 As HC_INTEGER Ptr, pcount2 As HC_INTEGER, points2 As HC_POINT Ptr, flist_length2 As HC_INTEGER, face_list2 As HC_INTEGER Ptr, polyline_count As HC_INTEGER Ptr, polyline_lengths As HC_INTEGER Ptr, polyline_points_count As HC_INTEGER Ptr, polyline_points As HC_POINT Ptr) As HC_INTEGER
Declare Function HC_Show_Intersect_Polyline_Size Cdecl Alias "HC_Show_Intersect_Polyline_Size"(pcount1 As HC_INTEGER, points1 As HC_POINT Ptr, flist_length1 As HC_INTEGER, face_list1 As HC_INTEGER Ptr, pcount2 As HC_INTEGER, points2 As HC_POINT Ptr, flist_length2 As HC_INTEGER, face_list2 As HC_INTEGER Ptr, polyline_count As HC_INTEGER Ptr, polyline_points_count As HC_INTEGER Ptr) As HC_INTEGER
Declare Sub HC_Compute_Optimized_Shell Cdecl Alias "HC_Compute_Optimized_Shell"(pcount As HC_INTEGER, puntos As HC_POINT Ptr, normals As HC_POINT Ptr, flist_length As HC_INTEGER, face_list As HC_INTEGER Ptr, options As HC_STRING, new_pcount As HC_INTEGER Ptr, new_points As HC_POINT Ptr, new_flist_length As HC_INTEGER Ptr, new_face_list As HC_INTEGER Ptr, point_mapping_list As HC_INTEGER Ptr, face_mapping_list As HC_INTEGER Ptr) 
Declare Sub HC_DCompute_Optimized_Shell Cdecl Alias "HC_DCompute_Optimized_Shell"(pcount As HC_INTEGER, puntos As HC_POINT Ptr, normals As HC_POINT Ptr, flist_length As HC_INTEGER, face_list As HC_INTEGER Ptr, options As HC_STRING, new_pcount As HC_INTEGER Ptr, new_points As HC_POINT Ptr, new_flist_length As HC_INTEGER Ptr, new_face_list As HC_INTEGER Ptr, point_mapping_list As HC_INTEGER Ptr, face_mapping_list As HC_INTEGER Ptr) 
Declare Function HC_Compute_Point_Inside_Shell Cdecl Alias "HC_Compute_Point_Inside_Shell"(test_point As HC_POINT Ptr, point_count As HC_INTEGER, puntos As HC_POINT Ptr, face_list_length As HC_INTEGER, face_list As HC_INTEGER Ptr) As HC_BOOLEAN 
Declare Function HC_Compute_Point_On_Shell Cdecl Alias "HC_Compute_Point_On_Shell"(test_point As HC_POINT Ptr, tolerance As HC_DOUBLE, point_count As HC_INTEGER, puntos As HC_POINT Ptr, face_list_length As HC_INTEGER, face_list As HC_INTEGER Ptr) As HC_BOOLEAN 
Declare Sub HC_Compute_Screen_Extent Cdecl Alias "HC_Compute_Screen_Extent"(segment As HC_STRING, options As HC_STRING, left_ As HC_SINGLE Ptr, right_ As HC_SINGLE Ptr, bottom As HC_SINGLE Ptr, top As HC_SINGLE Ptr) 
Declare Sub HC_Compute_Screen_Extent_By_Pat Cdecl Alias "HC_Compute_Screen_Extent_By_Pat"(count As HC_INTEGER, keys As HC_KEY Ptr, options As HC_STRING, left_ As HC_SINGLE Ptr, right_ As HC_SINGLE Ptr, bottom As HC_SINGLE Ptr, top As HC_SINGLE Ptr) 
Declare Sub HC_Compute_Screen_Extent_By_Key Cdecl Alias "HC_Compute_Screen_Extent_By_Key"(segKey As HC_KEY, options As HC_STRING, left_ As HC_SINGLE Ptr, right_ As HC_SINGLE Ptr, bottom As HC_SINGLE Ptr, top As HC_SINGLE Ptr) 
Declare Function HC_Compute_Selection_By_Polygon Cdecl Alias "HC_Compute_Selection_By_Polygon"(display As HC_STRING, start_seg As HC_STRING, action As HC_STRING, pcount As HC_INTEGER, puntos As HC_POINT Ptr) As HC_INTEGER
Declare Function HC_Compute_Selection_By_Polylin Cdecl Alias "HC_Compute_Selection_By_Polylin"(display As HC_STRING, start_seg As HC_STRING, action As HC_STRING, pcount As HC_INTEGER, puntos As HC_POINT Ptr) As HC_INTEGER
Declare Function HC_Compute_Selection_By_Volume Cdecl Alias "HC_Compute_Selection_By_Volume"(display As HC_STRING, start_seg As HC_STRING, action As HC_STRING, left_ As HC_DOUBLE, right_ As HC_DOUBLE, bottom As HC_DOUBLE, top As HC_DOUBLE, hither As HC_DOUBLE, yon As HC_DOUBLE) As HC_INTEGER
Declare Function HC_Compute_Selection_By_Shell Cdecl Alias "HC_Compute_Selection_By_Shell"(action As HC_STRING, start_seg As HC_STRING, pcount As HC_INTEGER, puntos As HC_POINT Ptr, flist_length As HC_INTEGER, face_list As HC_INTEGER Ptr) As HC_INTEGER
Declare Function HC_Compute_Selection_By_Ray Cdecl Alias "HC_Compute_Selection_By_Ray"(action As HC_STRING, start_seg As HC_STRING, start_point As HC_POINT Ptr, direction As HC_POINT Ptr) As HC_INTEGER
Declare Sub HC_Compute_Shell_Enclosure Cdecl Alias "HC_Compute_Shell_Enclosure"(point_count1 As HC_INTEGER, point_count2 As HC_POINT Ptr, points1 As HC_INTEGER, points2 As HC_INTEGER Ptr, face_list_length1 As HC_INTEGER, face_list_length2 As HC_POINT Ptr, face_list1 As HC_INTEGER, face_list2 As HC_INTEGER Ptr, result As HC_STRING) 
Declare Sub HC_Compute_Text_Extent_By_Key Cdecl Alias "HC_Compute_Text_Extent_By_Key"(key As HC_KEY, xfrac As HC_SINGLE Ptr, yfrac As HC_SINGLE Ptr) 
Declare Sub HC_Compute_Text_Extent_By_Path Cdecl Alias "HC_Compute_Text_Extent_By_Path"(count As HC_INTEGER, keys As HC_KEY Ptr, text As HC_STRING, xfrac As HC_SINGLE Ptr, yfrac As HC_SINGLE Ptr) 
Declare Sub HC_Compute_Text_Extent_Enc_Path Cdecl Alias "HC_Compute_Text_Extent_Enc_Path"(count As HC_INTEGER, keys As HC_KEY Ptr, encoding_ As HC_STRING, text As HC_STRING, xfrac As HC_SINGLE Ptr, yfrac As HC_SINGLE Ptr) 
Declare Sub HC_Compute_Text_Extent_With_Enc Cdecl Alias "HC_Compute_Text_Extent_With_Enc"(segment As HC_STRING, encoding_ As HC_STRING, text As HC_STRING, xfrac As HC_SINGLE Ptr, yfrac As HC_SINGLE Ptr) 
Declare Sub HC_Compute_Text_From_Text16 Cdecl Alias "HC_Compute_Text_From_Text16"(incount As HC_INTEGER, intext16 As HC_PIXEL Ptr, encoding_ As HC_STRING, outtext As HC_STRING) 
Declare Sub HC_Compute_Text16_From_Text Cdecl Alias "HC_Compute_Text16_From_Text"(intext As HC_STRING, encoding_ As HC_STRING, outcount As HC_INTEGER Ptr, outtext16 As HC_PIXEL Ptr) 
Declare Sub HC_Compute_Text_Outline_By_Key Cdecl Alias "HC_Compute_Text_Outline_By_Key"(key As HC_KEY, pcount As HC_INTEGER Ptr, puntos As HC_POINT Ptr, flist_length As HC_INTEGER Ptr, face_list As HC_INTEGER Ptr) 
Declare Sub HC_Compute_Text_Outline_Size_By Cdecl Alias "HC_Compute_Text_Outline_Size_By"(key As HC_KEY, pcount As HC_INTEGER Ptr, flist_length As HC_INTEGER Ptr) 
Declare Sub HC_Compute_Text_Outline_Size_Wi Cdecl Alias "HC_Compute_Text_Outline_Size_Wi"(segment As HC_STRING, encoding_ As HC_STRING, etext As HC_STRING, pcount As HC_INTEGER Ptr, flist_length As HC_INTEGER Ptr) 
Declare Sub HC_Compute_Text_Outline_With_En Cdecl Alias "HC_Compute_Text_Outline_With_En"(segment As HC_STRING, encoding_ As HC_STRING, etext As HC_STRING, pcount As HC_INTEGER Ptr, puntos As HC_POINT Ptr, flist_length As HC_INTEGER Ptr, face_list As HC_INTEGER Ptr) 
Declare Function HC_Compute_Transform Cdecl Alias "HC_Compute_Transform"(segment As HC_STRING, in_system As HC_STRING, out_system As HC_STRING, matrix As HC_SINGLE Ptr) As HC_BOOLEAN 
Declare Function HC_Compute_Transform_By_Path Cdecl Alias "HC_Compute_Transform_By_Path"(count As HC_INTEGER, keys As HC_KEY Ptr, in_system As HC_STRING, out_system As HC_STRING, matrix As HC_SINGLE Ptr) As HC_BOOLEAN 
Declare Sub HC_Compute_Transformed_Planes Cdecl Alias "HC_Compute_Transformed_Planes"(count As HC_INTEGER, planes As HC_PLANE Ptr, matrix As HC_SINGLE Ptr, out_planes As HC_PLANE Ptr) 
Declare Sub HC_DCompute_Transformed_Points Cdecl Alias "HC_DCompute_Transformed_Points"(count As HC_INTEGER, puntos As HC_POINT Ptr, matrix As HC_SINGLE Ptr, out_points As HC_POINT Ptr) 
Declare Function HC_Compute_Vector_Angle Cdecl Alias "HC_Compute_Vector_Angle"(vector As HC_POINT Ptr, vector2 As HC_POINT Ptr) As HC_DOUBLE 
Declare Sub HC_Control_Update Cdecl Alias "HC_Control_Update"(segment As HC_STRING, options As HC_STRING) 
Declare Sub HC_Control_Update_By_Key Cdecl Alias "HC_Control_Update_By_Key"(key As HC_KEY, options As HC_STRING) 
Declare Sub HC_Control_Update_Area Cdecl Alias "HC_Control_Update_Area"(segment As HC_STRING, left_ As HC_DOUBLE, right_ As HC_DOUBLE, bottom As HC_DOUBLE, top As HC_DOUBLE, options As HC_STRING) 
Declare Sub HC_Control_Update_Area_By_Key Cdecl Alias "HC_Control_Update_Area_By_Key"(key As HC_KEY, left_ As HC_DOUBLE, right_ As HC_DOUBLE, bottom As HC_DOUBLE, top As HC_DOUBLE, options As HC_STRING) 
Declare Sub HC_Copy_Geometry Cdecl Alias "HC_Copy_Geometry"(key As HC_KEY, segment As HC_STRING) 
Declare Function HC_KCopy_Geometry Cdecl Alias "HC_KCopy_Geometry"(key As HC_KEY, segment As HC_STRING) As HC_KEY 
Declare Sub HC_UnDefine_Callback_Name Cdecl Alias "HC_UnDefine_Callback_Name"(nombre As HC_STRING) 
Declare Sub HC_Define_Driver_Config Cdecl Alias "HC_Define_Driver_Config"(driver As HC_STRING, id As HC_STRING, version As HC_STRING, config As HC_STRING) 
Declare Sub HC_Define_Font Cdecl Alias "HC_Define_Font"(nombre As HC_STRING, options As HC_STRING, data_length As HC_INTEGER, dato As HC_INTEGER Ptr) 
Declare Sub HC_Define_Font_By_Reference Cdecl Alias "HC_Define_Font_By_Reference"(nombre As HC_STRING, options As HC_STRING, data_length As HC_INTEGER, dato As HC_INTEGER Ptr) 
Declare Sub HC_UnDefine_Font Cdecl Alias "HC_UnDefine_Font"(nombre As HC_STRING) 
Declare Sub HC_Define_Glyph Cdecl Alias "HC_Define_Glyph"(nombre As HC_STRING, data_size As HC_INTEGER, dato As HC_STRING) 
Declare Sub HC_UnDefine_Glyph Cdecl Alias "HC_UnDefine_Glyph"(nombre As HC_STRING) 
Declare Sub HC_Define_Line_Style Cdecl Alias "HC_Define_Line_Style"(nombre As HC_STRING, definition As HC_STRING) 
Declare Sub HC_UnDefine_Line_Style Cdecl Alias "HC_UnDefine_Line_Style"(nombre As HC_STRING) 
Declare Sub HC_Define_Local_Texture Cdecl Alias "HC_Define_Local_Texture"(texture_name As HC_STRING, definition As HC_STRING) 
Declare Sub HC_Define_Texture Cdecl Alias "HC_Define_Texture"(texture_name As HC_STRING, definition As HC_STRING) 
Declare Sub HC_UnDefine_Texture Cdecl Alias "HC_UnDefine_Texture"(texture_name As HC_STRING) 
Declare Sub HC_Edit_Circle Cdecl Alias "HC_Edit_Circle"(key As HC_KEY, point1 As HC_POINT Ptr, point2 As HC_POINT Ptr, point3 As HC_POINT Ptr) 
Declare Sub HC_Edit_Circle_By_Radius Cdecl Alias "HC_Edit_Circle_By_Radius"(key As HC_KEY, center As HC_POINT Ptr, radius As HC_DOUBLE, vector As HC_POINT Ptr) 
Declare Sub HC_Edit_Circular_Arc Cdecl Alias "HC_Edit_Circular_Arc"(key As HC_KEY, point1 As HC_POINT Ptr, point2 As HC_POINT Ptr, point3 As HC_POINT Ptr) 
Declare Sub HC_Edit_Circular_Chord Cdecl Alias "HC_Edit_Circular_Chord"(key As HC_KEY, point1 As HC_POINT Ptr, point2 As HC_POINT Ptr, point3 As HC_POINT Ptr) 
Declare Sub HC_Edit_Circular_Wedge Cdecl Alias "HC_Edit_Circular_Wedge"(key As HC_KEY, point1 As HC_POINT Ptr, point2 As HC_POINT Ptr, point3 As HC_POINT Ptr) 
Declare Sub HC_Edit_Cutting_Plane Cdecl Alias "HC_Edit_Cutting_Plane"(key As HC_KEY, a As HC_DOUBLE, b As HC_DOUBLE, c As HC_DOUBLE, d As HC_DOUBLE) 
Declare Sub HC_Edit_Cutting_Section Cdecl Alias "HC_Edit_Cutting_Section"(key As HC_KEY, offset As HC_INTEGER, deleting As HC_INTEGER, inserting As HC_INTEGER, newplanes As HC_SINGLE Ptr) 
Declare Sub HC_Edit_Cylinder Cdecl Alias "HC_Edit_Cylinder"(key As HC_KEY, p1 As HC_POINT Ptr, p2 As HC_POINT Ptr, radius As HC_DOUBLE, cap As HC_STRING) 
Declare Sub HC_Edit_Ellipse Cdecl Alias "HC_Edit_Ellipse"(key As HC_KEY, center As HC_POINT Ptr, major As HC_POINT Ptr, minor As HC_POINT Ptr) 
Declare Sub HC_Edit_Elliptical_Arc Cdecl Alias "HC_Edit_Elliptical_Arc"(key As HC_KEY, center As HC_POINT Ptr, major As HC_POINT Ptr, minor As HC_POINT Ptr, start As HC_DOUBLE, fin As HC_DOUBLE) 
Declare Sub HC_Edit_Geometry_Options Cdecl Alias "HC_Edit_Geometry_Options"(key As HC_KEY, list As HC_STRING) 
Declare Sub HC_Edit_Grid Cdecl Alias "HC_Edit_Grid"(key As HC_KEY, tipo As HC_STRING, origin As HC_POINT Ptr, ref1 As HC_POINT Ptr, ref2 As HC_POINT Ptr, count1 As HC_INTEGER, count2 As HC_INTEGER) 
Declare Sub HC_Edit_Image Cdecl Alias "HC_Edit_Image"(key As HC_KEY, xoffset As HC_INTEGER, yoffset As HC_INTEGER, xcount As HC_INTEGER, ycount As HC_INTEGER, dato As HC_PIXEL Ptr) 
Declare Sub HC_Edit_Line Cdecl Alias "HC_Edit_Line"(key As HC_KEY, xa As HC_DOUBLE, ya As HC_DOUBLE, za As HC_DOUBLE, xb As HC_DOUBLE, yb As HC_DOUBLE, zb As HC_DOUBLE) 
Declare Sub HC_Edit_Marker Cdecl Alias "HC_Edit_Marker"(key As HC_KEY, x As HC_DOUBLE, y As HC_DOUBLE, z As HC_DOUBLE) 
Declare Sub HC_Edit_Mesh Cdecl Alias "HC_Edit_Mesh"(key As HC_KEY, row_offset As HC_INTEGER, column_offset As HC_INTEGER, row_count As HC_INTEGER, column_count As HC_INTEGER, puntos As HC_POINT Ptr) 
Declare Sub HC_DEdit_Mesh Cdecl Alias "HC_DEdit_Mesh"(key As HC_KEY, row_offset As HC_INTEGER, column_offset As HC_INTEGER, row_count As HC_INTEGER, column_count As HC_INTEGER, puntos As HC_POINT Ptr) 
Declare Sub HC_Edit_NURBS_Curve Cdecl Alias "HC_Edit_NURBS_Curve"(key As HC_KEY, cp_offset As HC_INTEGER, knot_offset As HC_INTEGER, cp_count As HC_INTEGER, knot_count As HC_INTEGER, control_points As HC_POINT Ptr, weights As HC_SINGLE Ptr, knots As HC_SINGLE Ptr) 
Declare Sub HC_DEdit_NURBS_Curve Cdecl Alias "HC_DEdit_NURBS_Curve"(key As HC_KEY, cp_offset As HC_INTEGER, knot_offset As HC_INTEGER, cp_count As HC_INTEGER, knot_count As HC_INTEGER, control_points As HC_POINT Ptr, weights As HC_SINGLE Ptr, knots As HC_SINGLE Ptr) 
Declare Sub HC_Edit_NURBS_Surface Cdecl Alias "HC_Edit_NURBS_Surface"(key As HC_KEY, cp_offset As HC_INTEGER, weights_offset As HC_INTEGER, u_knot_offset As HC_INTEGER, v_knot_offset As HC_INTEGER, cp_replace_count As HC_INTEGER, weights_replace_count As HC_INTEGER, u_knot_replace_count As HC_INTEGER, v_knot_replace_count As HC_INTEGER, puntos As HC_POINT Ptr, weights As HC_SINGLE Ptr, u_knots As HC_SINGLE Ptr, v_knots As HC_SINGLE Ptr) 
Declare Sub HC_Edit_NURBS_Surface_Points Cdecl Alias "HC_Edit_NURBS_Surface_Points"(key As HC_KEY, cp_offset As HC_INTEGER, cp_replace_count As HC_INTEGER, puntos As HC_POINT Ptr) 
Declare Sub HC_Edit_NURBS_Surface_Knots Cdecl Alias "HC_Edit_NURBS_Surface_Knots"(key As HC_KEY, u_knot_offset As HC_INTEGER, v_knot_offset As HC_INTEGER, u_knot_replace_count As HC_INTEGER, v_knot_replace_count As HC_INTEGER, u_knots As HC_SINGLE Ptr, v_knots As HC_SINGLE Ptr) 
Declare Sub HC_Edit_NURBS_Surface_Weights Cdecl Alias "HC_Edit_NURBS_Surface_Weights"(key As HC_KEY, weights_offset As HC_INTEGER, weights_replace_count As HC_INTEGER, weights As HC_SINGLE Ptr) 
Declare Sub HC_DEdit_Polygon Cdecl Alias "HC_DEdit_Polygon"(key As HC_KEY, offset As HC_INTEGER, deleted As HC_INTEGER, insert As HC_INTEGER, puntos As HC_POINT Ptr) 
Declare Sub HC_DEdit_Polyline Cdecl Alias "HC_DEdit_Polyline"(key As HC_KEY, offset As HC_INTEGER, deleted As HC_INTEGER, insert As HC_INTEGER, puntos As HC_POINT Ptr) 
Declare Sub HC_Edit_PolyCylinder Cdecl Alias "HC_Edit_PolyCylinder"(key As HC_KEY, p_count As HC_INTEGER, pts As HC_POINT Ptr, r_count As HC_INTEGER, radii As HC_SINGLE Ptr, capping As HC_STRING) 
Declare Sub HC_Edit_Shell_Faces Cdecl Alias "HC_Edit_Shell_Faces"(key As HC_KEY, offset As HC_INTEGER, deleted As HC_INTEGER, ilist_length As HC_INTEGER, insert_list As HC_INTEGER Ptr) 
Declare Sub HC_Edit_Shell_Points Cdecl Alias "HC_Edit_Shell_Points"(key As HC_KEY, offset As HC_INTEGER, deleted As HC_INTEGER, insert As HC_INTEGER, puntos As HC_POINT Ptr) 
Declare Sub HC_DEdit_Shell_Points Cdecl Alias "HC_DEdit_Shell_Points"(key As HC_KEY, offset As HC_INTEGER, deleted As HC_INTEGER, insert As HC_INTEGER, puntos As HC_POINT Ptr) 
Declare Sub HC_Edit_Sphere Cdecl Alias "HC_Edit_Sphere"(key As HC_KEY, center As HC_POINT Ptr, radius As HC_DOUBLE, axis As HC_POINT Ptr, ortho As HC_POINT Ptr) 
Declare Function HC_Filter_Circumcuboid Cdecl Alias "HC_Filter_Circumcuboid"(segment As HC_STRING, options As HC_STRING, min As HC_POINT Ptr, max As HC_POINT Ptr) As HC_BOOLEAN 
Declare Function HC_Filter_Circumcuboid_By_Key Cdecl Alias "HC_Filter_Circumcuboid_By_Key"(segKey As HC_KEY, options As HC_STRING, min As HC_POINT Ptr, max As HC_POINT Ptr) As HC_BOOLEAN 
Declare Function HC_Filter_Circumsphere Cdecl Alias "HC_Filter_Circumsphere"(segment As HC_STRING, options As HC_STRING, center As HC_POINT Ptr, radius As HC_SINGLE Ptr) As HC_BOOLEAN 
Declare Function HC_Filter_Circumsphere_By_Key Cdecl Alias "HC_Filter_Circumsphere_By_Key"(segKey As HC_KEY, options As HC_STRING, center As HC_POINT Ptr, radius As HC_SINGLE Ptr) As HC_BOOLEAN 
Declare Sub HC_Flush_Attributes Cdecl Alias "HC_Flush_Attributes"(segment As HC_STRING) 
Declare Sub HC_Get_String_With_Encoding Cdecl Alias "HC_Get_String_With_Encoding"(context As HC_STRING, encoding_ As HC_STRING, text As HC_STRING) 
Declare Sub HC_Include_Segment_By_Key Cdecl Alias "HC_Include_Segment_By_Key"(seg_key As HC_KEY) 
Declare Function HC_KInclude_Segment_By_Key Cdecl Alias "HC_KInclude_Segment_By_Key"(seg_key As HC_KEY) As HC_KEY 
Declare Sub HC_Conditional_Include Cdecl Alias "HC_Conditional_Include"(include As HC_STRING, conditions As HC_STRING) 
Declare Function HC_KConditional_Include Cdecl Alias "HC_KConditional_Include"(include As HC_STRING, conditions As HC_STRING) As HC_KEY 
Declare Sub HC_Conditional_Include_By_Key Cdecl Alias "HC_Conditional_Include_By_Key"(seg_key As HC_KEY, conditions As HC_STRING) 
Declare Function HC_KConditional_Include_By_Key Cdecl Alias "HC_KConditional_Include_By_Key"(seg_key As HC_KEY, conditions As HC_STRING) As HC_KEY 
Declare Sub HC_DInsert_Circle Cdecl Alias "HC_DInsert_Circle"(point1 As HC_POINT Ptr, point2 As HC_POINT Ptr, point3 As HC_POINT Ptr) 
Declare Function HC_DKInsert_Circle Cdecl Alias "HC_DKInsert_Circle"(point1 As HC_POINT Ptr, point2 As HC_POINT Ptr, point3 As HC_POINT Ptr) As HC_KEY 
Declare Sub HC_DQInsert_Circle Cdecl Alias "HC_DQInsert_Circle"(segment As HC_STRING, point1 As HC_POINT Ptr, point2 As HC_POINT Ptr, point3 As HC_POINT Ptr) 
Declare Function HC_DQKInsert_Circle Cdecl Alias "HC_DQKInsert_Circle"(segment As HC_STRING, point1 As HC_POINT Ptr, point2 As HC_POINT Ptr, point3 As HC_POINT Ptr) As HC_KEY 
Declare Sub HC_Insert_Circle_By_Radius Cdecl Alias "HC_Insert_Circle_By_Radius"(center As HC_POINT Ptr, radius As HC_DOUBLE, normal As HC_POINT Ptr) 
Declare Function HC_KInsert_Circle_By_Radius Cdecl Alias "HC_KInsert_Circle_By_Radius"(center As HC_POINT Ptr, radius As HC_DOUBLE, normal As HC_POINT Ptr) As HC_KEY 
Declare Sub HC_QInsert_Circle_By_Radius Cdecl Alias "HC_QInsert_Circle_By_Radius"(segment As HC_STRING, center As HC_POINT Ptr, radius As HC_DOUBLE, normal As HC_POINT Ptr) 
Declare Function HC_QKInsert_Circle_By_Radius Cdecl Alias "HC_QKInsert_Circle_By_Radius"(segment As HC_STRING, center As HC_POINT Ptr, radius As HC_DOUBLE, normal As HC_POINT Ptr) As HC_KEY 
Declare Sub HC_DInsert_Circular_Arc Cdecl Alias "HC_DInsert_Circular_Arc"(point1 As HC_POINT Ptr, point2 As HC_POINT Ptr, point3 As HC_POINT Ptr) 
Declare Function HC_DKInsert_Circular_Arc Cdecl Alias "HC_DKInsert_Circular_Arc"(point1 As HC_POINT Ptr, point2 As HC_POINT Ptr, point3 As HC_POINT Ptr) As HC_KEY 
Declare Sub HC_DQInsert_Circular_Arc Cdecl Alias "HC_DQInsert_Circular_Arc"(segment As HC_STRING, point1 As HC_POINT Ptr, point2 As HC_POINT Ptr, point3 As HC_POINT Ptr) 
Declare Function HC_DQKInsert_Circular_Arc Cdecl Alias "HC_DQKInsert_Circular_Arc"(segment As HC_STRING, point1 As HC_POINT Ptr, point2 As HC_POINT Ptr, point3 As HC_POINT Ptr) As HC_KEY 
Declare Function HC_KInsert_Circular_Chord Cdecl Alias "HC_KInsert_Circular_Chord"(point1 As HC_POINT Ptr, point2 As HC_POINT Ptr, point3 As HC_POINT Ptr) As HC_KEY 
Declare Sub HC_QInsert_Circular_Chord Cdecl Alias "HC_QInsert_Circular_Chord"(segment As HC_STRING, point1 As HC_POINT Ptr, point2 As HC_POINT Ptr, point3 As HC_POINT Ptr) 
Declare Function HC_QKInsert_Circular_Chord Cdecl Alias "HC_QKInsert_Circular_Chord"(segment As HC_STRING, point1 As HC_POINT Ptr, point2 As HC_POINT Ptr, point3 As HC_POINT Ptr) As HC_KEY 
Declare Sub HC_DInsert_Circular_Chord Cdecl Alias "HC_DInsert_Circular_Chord"(point1 As HC_POINT Ptr, point2 As HC_POINT Ptr, point3 As HC_POINT Ptr) 
Declare Function HC_DKInsert_Circular_Chord Cdecl Alias "HC_DKInsert_Circular_Chord"(point1 As HC_POINT Ptr, point2 As HC_POINT Ptr, point3 As HC_POINT Ptr) As HC_KEY 
Declare Sub HC_DQInsert_Circular_Chord Cdecl Alias "HC_DQInsert_Circular_Chord"(segment As HC_STRING, point1 As HC_POINT Ptr, point2 As HC_POINT Ptr, point3 As HC_POINT Ptr) 
Declare Function HC_DQKInsert_Circular_Chord Cdecl Alias "HC_DQKInsert_Circular_Chord"(segment As HC_STRING, point1 As HC_POINT Ptr, point2 As HC_POINT Ptr, point3 As HC_POINT Ptr) As HC_KEY 
Declare Function HC_KInsert_Circular_Wedge Cdecl Alias "HC_KInsert_Circular_Wedge"(point1 As HC_POINT Ptr, point2 As HC_POINT Ptr, point3 As HC_POINT Ptr) As HC_KEY 
Declare Sub HC_QInsert_Circular_Wedge Cdecl Alias "HC_QInsert_Circular_Wedge"(segment As HC_STRING, point1 As HC_POINT Ptr, point2 As HC_POINT Ptr, point3 As HC_POINT Ptr) 
Declare Function HC_QKInsert_Circular_Wedge Cdecl Alias "HC_QKInsert_Circular_Wedge"(segment As HC_STRING, point1 As HC_POINT Ptr, point2 As HC_POINT Ptr, point3 As HC_POINT Ptr) As HC_KEY 
Declare Sub HC_DInsert_Circular_Wedge Cdecl Alias "HC_DInsert_Circular_Wedge"(point1 As HC_POINT Ptr, point2 As HC_POINT Ptr, point3 As HC_POINT Ptr) 
Declare Function HC_DKInsert_Circular_Wedge Cdecl Alias "HC_DKInsert_Circular_Wedge"(point1 As HC_POINT Ptr, point2 As HC_POINT Ptr, point3 As HC_POINT Ptr) As HC_KEY 
Declare Sub HC_DQInsert_Circular_Wedge Cdecl Alias "HC_DQInsert_Circular_Wedge"(segment As HC_STRING, point1 As HC_POINT Ptr, point2 As HC_POINT Ptr, point3 As HC_POINT Ptr) 
Declare Function HC_DQKInsert_Circular_Wedge Cdecl Alias "HC_DQKInsert_Circular_Wedge"(segment As HC_STRING, point1 As HC_POINT Ptr, point2 As HC_POINT Ptr, point3 As HC_POINT Ptr) As HC_KEY 
Declare Sub HC_Insert_Cutting_Plane Cdecl Alias "HC_Insert_Cutting_Plane"(a As HC_DOUBLE, b As HC_DOUBLE, c As HC_DOUBLE, d As HC_DOUBLE) 
Declare Function HC_KInsert_Cutting_Plane Cdecl Alias "HC_KInsert_Cutting_Plane"(a As HC_DOUBLE, b As HC_DOUBLE, c As HC_DOUBLE, d As HC_DOUBLE) As HC_KEY 
Declare Sub HC_QInsert_Cutting_Plane Cdecl Alias "HC_QInsert_Cutting_Plane"(segment As HC_STRING, a As HC_DOUBLE, b As HC_DOUBLE, c As HC_DOUBLE, d As HC_DOUBLE) 
Declare Function HC_QKInsert_Cutting_Plane Cdecl Alias "HC_QKInsert_Cutting_Plane"(segment As HC_STRING, a As HC_DOUBLE, b As HC_DOUBLE, c As HC_DOUBLE, d As HC_DOUBLE) As HC_KEY 
Declare Sub HC_DInsert_Cutting_Plane Cdecl Alias "HC_DInsert_Cutting_Plane"(a As HC_DOUBLE, b As HC_DOUBLE, c As HC_DOUBLE, d As HC_DOUBLE) 
Declare Function HC_DKInsert_Cutting_Plane Cdecl Alias "HC_DKInsert_Cutting_Plane"(a As HC_DOUBLE, b As HC_DOUBLE, c As HC_DOUBLE, d As HC_DOUBLE) As HC_KEY 
Declare Sub HC_DQInsert_Cutting_Plane Cdecl Alias "HC_DQInsert_Cutting_Plane"(segment As HC_STRING, a As HC_DOUBLE, b As HC_DOUBLE, c As HC_DOUBLE, d As HC_DOUBLE) 
Declare Function HC_DQKInsert_Cutting_Plane Cdecl Alias "HC_DQKInsert_Cutting_Plane"(segment As HC_STRING, a As HC_DOUBLE, b As HC_DOUBLE, c As HC_DOUBLE, d As HC_DOUBLE) As HC_KEY 
Declare Sub HC_Insert_Cutting_Section Cdecl Alias "HC_Insert_Cutting_Section"(count As HC_INTEGER, planes As HC_SINGLE Ptr) 
Declare Function HC_KInsert_Cutting_Section Cdecl Alias "HC_KInsert_Cutting_Section"(count As HC_INTEGER, planes As HC_SINGLE Ptr) As HC_KEY 
Declare Sub HC_QInsert_Cutting_Section Cdecl Alias "HC_QInsert_Cutting_Section"(segment As HC_STRING, count As HC_INTEGER, planes As HC_SINGLE Ptr) 
Declare Function HC_QKInsert_Cutting_Section Cdecl Alias "HC_QKInsert_Cutting_Section"(segment As HC_STRING, count As HC_INTEGER, planes As HC_SINGLE Ptr) As HC_KEY 
Declare Function HC_KInsert_Cylinder Cdecl Alias "HC_KInsert_Cylinder"(p1 As HC_POINT Ptr, p2 As HC_POINT Ptr, radius As HC_DOUBLE, cap As HC_STRING) As HC_KEY 
Declare Sub HC_QInsert_Cylinder Cdecl Alias "HC_QInsert_Cylinder"(segment As HC_STRING, p1 As HC_POINT Ptr, p2 As HC_POINT Ptr, radius As HC_DOUBLE, cap As HC_STRING) 
Declare Function HC_QKInsert_Cylinder Cdecl Alias "HC_QKInsert_Cylinder"(segment As HC_STRING, p1 As HC_POINT Ptr, p2 As HC_POINT Ptr, radius As HC_DOUBLE, cap As HC_STRING) As HC_KEY 
Declare Sub HC_DInsert_Distant_Light Cdecl Alias "HC_DInsert_Distant_Light"(di As HC_DOUBLE, dj As HC_DOUBLE, dk As HC_DOUBLE) 
Declare Function HC_DKInsert_Distant_Light Cdecl Alias "HC_DKInsert_Distant_Light"(di As HC_DOUBLE, dj As HC_DOUBLE, dk As HC_DOUBLE) As HC_KEY 
Declare Sub HC_DQInsert_Distant_Light Cdecl Alias "HC_DQInsert_Distant_Light"(segment As HC_STRING, di As HC_DOUBLE, dj As HC_DOUBLE, dk As HC_DOUBLE) 
Declare Function HC_DQKInsert_Distant_Light Cdecl Alias "HC_DQKInsert_Distant_Light"(segment As HC_STRING, di As HC_DOUBLE, dj As HC_DOUBLE, dk As HC_DOUBLE) As HC_KEY 
Declare Sub HC_DInsert_Ellipse Cdecl Alias "HC_DInsert_Ellipse"(center As HC_POINT Ptr, major As HC_POINT Ptr, minor As HC_POINT Ptr) 
Declare Function HC_DKInsert_Ellipse Cdecl Alias "HC_DKInsert_Ellipse"(center As HC_POINT Ptr, major As HC_POINT Ptr, minor As HC_POINT Ptr) As HC_KEY 
Declare Sub HC_DQInsert_Ellipse Cdecl Alias "HC_DQInsert_Ellipse"(segment As HC_STRING, center As HC_POINT Ptr, major As HC_POINT Ptr, minor As HC_POINT Ptr) 
Declare Function HC_DQKInsert_Ellipse Cdecl Alias "HC_DQKInsert_Ellipse"(segment As HC_STRING, center As HC_POINT Ptr, major As HC_POINT Ptr, minor As HC_POINT Ptr) As HC_KEY 
Declare Sub HC_DInsert_Elliptical_Arc Cdecl Alias "HC_DInsert_Elliptical_Arc"(center As HC_POINT Ptr, major As HC_POINT Ptr, minor As HC_POINT Ptr, start As HC_DOUBLE, fin As HC_DOUBLE) 
Declare Function HC_DKInsert_Elliptical_Arc Cdecl Alias "HC_DKInsert_Elliptical_Arc"(center As HC_POINT Ptr, major As HC_POINT Ptr, minor As HC_POINT Ptr, start As HC_DOUBLE, fin As HC_DOUBLE) As HC_KEY 
Declare Sub HC_DQInsert_Elliptical_Arc Cdecl Alias "HC_DQInsert_Elliptical_Arc"(segment As HC_STRING, center As HC_POINT Ptr, major As HC_POINT Ptr, minor As HC_POINT Ptr, start As HC_DOUBLE, fin As HC_DOUBLE) 
Declare Function HC_DQKInsert_Elliptical_Arc Cdecl Alias "HC_DQKInsert_Elliptical_Arc"(segment As HC_STRING, center As HC_POINT Ptr, major As HC_POINT Ptr, minor As HC_POINT Ptr, start As HC_DOUBLE, fin As HC_DOUBLE) As HC_KEY 
Declare Function HC_KInsert_Grid Cdecl Alias "HC_KInsert_Grid"(tipo As HC_STRING, origin As HC_POINT Ptr, ref1 As HC_POINT Ptr, ref2 As HC_POINT Ptr, count1 As HC_INTEGER, count2 As HC_INTEGER) As HC_KEY 
Declare Sub HC_QInsert_Grid Cdecl Alias "HC_QInsert_Grid"(segment As HC_STRING, tipo As HC_STRING, origin As HC_POINT Ptr, ref1 As HC_POINT Ptr, ref2 As HC_POINT Ptr, count1 As HC_INTEGER, count2 As HC_INTEGER) 
Declare Function HC_QKInsert_Grid Cdecl Alias "HC_QKInsert_Grid"(segment As HC_STRING, tipo As HC_STRING, origin As HC_POINT Ptr, ref1 As HC_POINT Ptr, ref2 As HC_POINT Ptr, count1 As HC_INTEGER, count2 As HC_INTEGER) As HC_KEY 
Declare Sub HC_DInsert_Grid Cdecl Alias "HC_DInsert_Grid"(tipo As HC_STRING, origin As HC_POINT Ptr, ref1 As HC_POINT Ptr, ref2 As HC_POINT Ptr, count1 As HC_INTEGER, count2 As HC_INTEGER) 
Declare Function HC_DKInsert_Grid Cdecl Alias "HC_DKInsert_Grid"(tipo As HC_STRING, origin As HC_POINT Ptr, ref1 As HC_POINT Ptr, ref2 As HC_POINT Ptr, count1 As HC_INTEGER, count2 As HC_INTEGER) As HC_KEY 
Declare Sub HC_DQInsert_Grid Cdecl Alias "HC_DQInsert_Grid"(segment As HC_STRING, tipo As HC_STRING, origin As HC_POINT Ptr, ref1 As HC_POINT Ptr, ref2 As HC_POINT Ptr, count1 As HC_INTEGER, count2 As HC_INTEGER) 
Declare Function HC_DQKInsert_Grid Cdecl Alias "HC_DQKInsert_Grid"(segment As HC_STRING, tipo As HC_STRING, origin As HC_POINT Ptr, ref1 As HC_POINT Ptr, ref2 As HC_POINT Ptr, count1 As HC_INTEGER, count2 As HC_INTEGER) As HC_KEY 
Declare Function HC_KInsert_Image Cdecl Alias "HC_KInsert_Image"(x As HC_DOUBLE, y As HC_DOUBLE, z As HC_DOUBLE, Formato As HC_STRING, width_ As HC_INTEGER, height As HC_INTEGER, dato As HC_PIXEL Ptr) As HC_KEY 
Declare Sub HC_QInsert_Image Cdecl Alias "HC_QInsert_Image"(segment As HC_STRING, x As HC_DOUBLE, y As HC_DOUBLE, z As HC_DOUBLE, Formato As HC_STRING, width_ As HC_INTEGER, height As HC_INTEGER, dato As HC_PIXEL Ptr) 
Declare Function HC_QKInsert_Image Cdecl Alias "HC_QKInsert_Image"(segment As HC_STRING, x As HC_DOUBLE, y As HC_DOUBLE, z As HC_DOUBLE, Formato As HC_STRING, width_ As HC_INTEGER, height As HC_INTEGER, dato As HC_PIXEL Ptr) As HC_KEY 
Declare Sub HC_Insert_Image_By_Ref Cdecl Alias "HC_Insert_Image_By_Ref"(x As HC_DOUBLE, y As HC_DOUBLE, z As HC_DOUBLE, Formato As HC_STRING, width_ As HC_INTEGER, height As HC_INTEGER, dato As HC_PIXEL Ptr) 
Declare Sub HC_QInsert_Image_By_Ref Cdecl Alias "HC_QInsert_Image_By_Ref"(segment As HC_STRING, x As HC_DOUBLE, y As HC_DOUBLE, z As HC_DOUBLE, Formato As HC_STRING, width_ As HC_INTEGER, height As HC_INTEGER, dato As HC_PIXEL Ptr) 
Declare Function HC_QKInsert_Image_By_Ref Cdecl Alias "HC_QKInsert_Image_By_Ref"(segment As HC_STRING, x As HC_DOUBLE, y As HC_DOUBLE, z As HC_DOUBLE, Formato As HC_STRING, width_ As HC_INTEGER, height As HC_INTEGER, dato As HC_PIXEL Ptr) As HC_KEY 
Declare Sub HC_DInsert_Image Cdecl Alias "HC_DInsert_Image"(x As HC_DOUBLE, y As HC_DOUBLE, z As HC_DOUBLE, Formato As HC_STRING, width_ As HC_INTEGER, height As HC_INTEGER, dato As HC_PIXEL Ptr) 
Declare Function HC_DKInsert_Image Cdecl Alias "HC_DKInsert_Image"(x As HC_DOUBLE, y As HC_DOUBLE, z As HC_DOUBLE, Formato As HC_STRING, width_ As HC_INTEGER, height As HC_INTEGER, dato As HC_PIXEL Ptr) As HC_KEY 
Declare Sub HC_DQInsert_Image Cdecl Alias "HC_DQInsert_Image"(segment As HC_STRING, x As HC_DOUBLE, y As HC_DOUBLE, z As HC_DOUBLE, Formato As HC_STRING, width_ As HC_INTEGER, height As HC_INTEGER, dato As HC_PIXEL Ptr) 
Declare Function HC_DQKInsert_Image Cdecl Alias "HC_DQKInsert_Image"(segment As HC_STRING, x As HC_DOUBLE, y As HC_DOUBLE, z As HC_DOUBLE, Formato As HC_STRING, width_ As HC_INTEGER, height As HC_INTEGER, dato As HC_PIXEL Ptr) As HC_KEY 
Declare Sub HC_DInsert_Ink Cdecl Alias "HC_DInsert_Ink"(x As HC_DOUBLE, y As HC_DOUBLE, z As HC_DOUBLE) 
Declare Function HC_DKInsert_Ink Cdecl Alias "HC_DKInsert_Ink"(x As HC_DOUBLE, y As HC_DOUBLE, z As HC_DOUBLE) As HC_KEY 
Declare Sub HC_DQInsert_Ink Cdecl Alias "HC_DQInsert_Ink"(segment As HC_STRING, x As HC_DOUBLE, y As HC_DOUBLE, z As HC_DOUBLE) 
Declare Function HC_DQKInsert_Ink Cdecl Alias "HC_DQKInsert_Ink"(segment As HC_STRING, x As HC_DOUBLE, y As HC_DOUBLE, z As HC_DOUBLE) As HC_KEY 
Declare Sub HC_DInsert_Line Cdecl Alias "HC_DInsert_Line"(xa As HC_DOUBLE, ya As HC_DOUBLE, za As HC_DOUBLE, xb As HC_DOUBLE, yb As HC_DOUBLE, zb As HC_DOUBLE) 
Declare Function HC_DKInsert_Line Cdecl Alias "HC_DKInsert_Line"(xa As HC_DOUBLE, ya As HC_DOUBLE, za As HC_DOUBLE, xb As HC_DOUBLE, yb As HC_DOUBLE, zb As HC_DOUBLE) As HC_KEY 
Declare Sub HC_DQInsert_Line Cdecl Alias "HC_DQInsert_Line"(segment As HC_STRING, xa As HC_DOUBLE, ya As HC_DOUBLE, za As HC_DOUBLE, xb As HC_DOUBLE, yb As HC_DOUBLE, zb As HC_DOUBLE) 
Declare Function HC_DQKInsert_Line Cdecl Alias "HC_DQKInsert_Line"(segment As HC_STRING, xa As HC_DOUBLE, ya As HC_DOUBLE, za As HC_DOUBLE, xb As HC_DOUBLE, yb As HC_DOUBLE, zb As HC_DOUBLE) As HC_KEY 
Declare Sub HC_Insert_Local_Light Cdecl Alias "HC_Insert_Local_Light"(x As HC_DOUBLE, y As HC_DOUBLE, z As HC_DOUBLE) 
Declare Function HC_KInsert_Local_Light Cdecl Alias "HC_KInsert_Local_Light"(x As HC_DOUBLE, y As HC_DOUBLE, z As HC_DOUBLE) As HC_KEY 
Declare Sub HC_QInsert_Local_Light Cdecl Alias "HC_QInsert_Local_Light"(segment As HC_STRING, x As HC_DOUBLE, y As HC_DOUBLE, z As HC_DOUBLE) 
Declare Function HC_QKInsert_Local_Light Cdecl Alias "HC_QKInsert_Local_Light"(segment As HC_STRING, x As HC_DOUBLE, y As HC_DOUBLE, z As HC_DOUBLE) As HC_KEY 
Declare Sub HC_DInsert_Local_Light Cdecl Alias "HC_DInsert_Local_Light"(x As HC_DOUBLE, y As HC_DOUBLE, z As HC_DOUBLE) 
Declare Function HC_DKInsert_Local_Light Cdecl Alias "HC_DKInsert_Local_Light"(x As HC_DOUBLE, y As HC_DOUBLE, z As HC_DOUBLE) As HC_KEY 
Declare Sub HC_DQInsert_Local_Light Cdecl Alias "HC_DQInsert_Local_Light"(segment As HC_STRING, x As HC_DOUBLE, y As HC_DOUBLE, z As HC_DOUBLE) 
Declare Function HC_DQKInsert_Local_Light Cdecl Alias "HC_DQKInsert_Local_Light"(segment As HC_STRING, x As HC_DOUBLE, y As HC_DOUBLE, z As HC_DOUBLE) As HC_KEY 
Declare Sub HC_DInsert_Marker Cdecl Alias "HC_DInsert_Marker"(x As HC_DOUBLE, y As HC_DOUBLE, z As HC_DOUBLE) 
Declare Function HC_DKInsert_Marker Cdecl Alias "HC_DKInsert_Marker"(x As HC_DOUBLE, y As HC_DOUBLE, z As HC_DOUBLE) As HC_KEY 
Declare Sub HC_DQInsert_Marker Cdecl Alias "HC_DQInsert_Marker"(segment As HC_STRING, x As HC_DOUBLE, y As HC_DOUBLE, z As HC_DOUBLE) 
Declare Function HC_DQKInsert_Marker Cdecl Alias "HC_DQKInsert_Marker"(segment As HC_STRING, x As HC_DOUBLE, y As HC_DOUBLE, z As HC_DOUBLE) As HC_KEY 
Declare Sub HC_QInsert_Mesh Cdecl Alias "HC_QInsert_Mesh"(segment As HC_STRING, rows As HC_INTEGER, columns As HC_INTEGER, puntos As HC_POINT Ptr) 
Declare Function HC_QKInsert_Mesh Cdecl Alias "HC_QKInsert_Mesh"(segment As HC_STRING, rows As HC_INTEGER, columns As HC_INTEGER, puntos As HC_POINT Ptr) As HC_KEY 
Declare Sub HC_Insert_Mesh_By_Ref Cdecl Alias "HC_Insert_Mesh_By_Ref"(rows As HC_INTEGER, columns As HC_INTEGER, puntos As HC_POINT Ptr) 
Declare Function HC_KInsert_Mesh_By_Ref Cdecl Alias "HC_KInsert_Mesh_By_Ref"(rows As HC_INTEGER, columns As HC_INTEGER, puntos As HC_POINT Ptr) As HC_KEY 
Declare Sub HC_QInsert_Mesh_By_Ref Cdecl Alias "HC_QInsert_Mesh_By_Ref"(segment As HC_STRING, rows As HC_INTEGER, columns As HC_INTEGER, puntos As HC_POINT Ptr) 
Declare Function HC_QKInsert_Mesh_By_Ref Cdecl Alias "HC_QKInsert_Mesh_By_Ref"(segment As HC_STRING, rows As HC_INTEGER, columns As HC_INTEGER, puntos As HC_POINT Ptr) As HC_KEY 
Declare Sub HC_DInsert_Mesh Cdecl Alias "HC_DInsert_Mesh"(rows As HC_INTEGER, columns As HC_INTEGER, puntos As HC_POINT Ptr) 
Declare Function HC_DKInsert_Mesh Cdecl Alias "HC_DKInsert_Mesh"(rows As HC_INTEGER, columns As HC_INTEGER, puntos As HC_POINT Ptr) As HC_KEY 
Declare Sub HC_DQInsert_Mesh Cdecl Alias "HC_DQInsert_Mesh"(segment As HC_STRING, rows As HC_INTEGER, columns As HC_INTEGER, puntos As HC_POINT Ptr) 
Declare Function HC_DQKInsert_Mesh Cdecl Alias "HC_DQKInsert_Mesh"(segment As HC_STRING, rows As HC_INTEGER, columns As HC_INTEGER, puntos As HC_POINT Ptr) As HC_KEY 
Declare Sub HC_DInsert_Polygon Cdecl Alias "HC_DInsert_Polygon"(count As HC_INTEGER, puntos As HC_POINT Ptr) 
Declare Function HC_DKInsert_Polygon Cdecl Alias "HC_DKInsert_Polygon"(count As HC_INTEGER, puntos As HC_POINT Ptr) As HC_KEY 
Declare Sub HC_DQInsert_Polygon Cdecl Alias "HC_DQInsert_Polygon"(segment As HC_STRING, count As HC_INTEGER, puntos As HC_POINT Ptr) 
Declare Function HC_DQKInsert_Polygon Cdecl Alias "HC_DQKInsert_Polygon"(segment As HC_STRING, count As HC_INTEGER, puntos As HC_POINT Ptr) As HC_KEY 
Declare Sub HC_DInsert_Polyline Cdecl Alias "HC_DInsert_Polyline"(count As HC_INTEGER, puntos As HC_POINT Ptr) 
Declare Function HC_DKInsert_Polyline Cdecl Alias "HC_DKInsert_Polyline"(count As HC_INTEGER, puntos As HC_POINT Ptr) As HC_KEY 
Declare Sub HC_DQInsert_Polyline Cdecl Alias "HC_DQInsert_Polyline"(segment As HC_STRING, count As HC_INTEGER, puntos As HC_POINT Ptr) 
Declare Function HC_DQKInsert_Polyline Cdecl Alias "HC_DQKInsert_Polyline"(segment As HC_STRING, count As HC_INTEGER, puntos As HC_POINT Ptr) As HC_KEY 
Declare Sub HC_Insert_PolyCylinder Cdecl Alias "HC_Insert_PolyCylinder"(p_count As HC_INTEGER, pts As HC_POINT Ptr, r_count As HC_INTEGER, radii As HC_SINGLE Ptr, capping As HC_STRING) 
Declare Sub HC_QInsert_PolyCylinder Cdecl Alias "HC_QInsert_PolyCylinder"(segment As HC_STRING, p_count As HC_INTEGER, pts As HC_POINT Ptr, r_count As HC_INTEGER, radii As HC_SINGLE Ptr, capping As HC_STRING) 
Declare Function HC_KInsert_PolyCylinder Cdecl Alias "HC_KInsert_PolyCylinder"(p_count As HC_INTEGER, pts As HC_POINT Ptr, r_count As HC_INTEGER, radii As HC_SINGLE Ptr, capping As HC_STRING) As HC_KEY 
Declare Function HC_QKInsert_PolyCylinder Cdecl Alias "HC_QKInsert_PolyCylinder"(segment As HC_STRING, p_count As HC_INTEGER, pts As HC_POINT Ptr, r_count As HC_INTEGER, radii As HC_SINGLE Ptr, capping As HC_STRING) As HC_KEY 
Declare Function HC_KInsert_Shell Cdecl Alias "HC_KInsert_Shell"(pcount As HC_INTEGER, puntos As HC_POINT Ptr, flist_length As HC_INTEGER, face_list As HC_INTEGER Ptr) As HC_KEY 
Declare Sub HC_QInsert_Shell Cdecl Alias "HC_QInsert_Shell"(segment As HC_STRING, pcount As HC_INTEGER, puntos As HC_POINT Ptr, flist_length As HC_INTEGER, face_list As HC_INTEGER Ptr) 
Declare Function HC_QKInsert_Shell Cdecl Alias "HC_QKInsert_Shell"(segment As HC_STRING, pcount As HC_INTEGER, puntos As HC_POINT Ptr, flist_length As HC_INTEGER, face_list As HC_INTEGER Ptr) As HC_KEY 
Declare Sub HC_Insert_Shell_By_Ref Cdecl Alias "HC_Insert_Shell_By_Ref"(pcount As HC_INTEGER, puntos As HC_POINT Ptr, flist_length As HC_INTEGER, face_list As HC_INTEGER Ptr) 
Declare Function HC_KInsert_Shell_By_Ref Cdecl Alias "HC_KInsert_Shell_By_Ref"(pcount As HC_INTEGER, puntos As HC_POINT Ptr, flist_length As HC_INTEGER, face_list As HC_INTEGER Ptr) As HC_KEY 
Declare Sub HC_QInsert_Shell_By_Ref Cdecl Alias "HC_QInsert_Shell_By_Ref"(segment As HC_STRING, pcount As HC_INTEGER, puntos As HC_POINT Ptr, flist_length As HC_INTEGER, face_list As HC_INTEGER Ptr) 
Declare Function HC_QKInsert_Shell_By_Ref Cdecl Alias "HC_QKInsert_Shell_By_Ref"(segment As HC_STRING, pcount As HC_INTEGER, puntos As HC_POINT Ptr, flist_length As HC_INTEGER, face_list As HC_INTEGER Ptr) As HC_KEY 
Declare Sub HC_DInsert_Shell Cdecl Alias "HC_DInsert_Shell"(pcount As HC_INTEGER, puntos As HC_POINT Ptr, flist_length As HC_INTEGER, face_list As HC_INTEGER Ptr) 
Declare Function HC_DKInsert_Shell Cdecl Alias "HC_DKInsert_Shell"(pcount As HC_INTEGER, puntos As HC_POINT Ptr, flist_length As HC_INTEGER, face_list As HC_INTEGER Ptr) As HC_KEY 
Declare Sub HC_DQInsert_Shell Cdecl Alias "HC_DQInsert_Shell"(segment As HC_STRING, pcount As HC_INTEGER, puntos As HC_POINT Ptr, flist_length As HC_INTEGER, face_list As HC_INTEGER Ptr) 
Declare Function HC_DQKInsert_Shell Cdecl Alias "HC_DQKInsert_Shell"(segment As HC_STRING, pcount As HC_INTEGER, puntos As HC_POINT Ptr, flist_length As HC_INTEGER, face_list As HC_INTEGER Ptr) As HC_KEY 
Declare Sub HC_Insert_Shell_By_Tristrips Cdecl Alias "HC_Insert_Shell_By_Tristrips"(pcount As HC_INTEGER, puntos As HC_POINT Ptr, tristrips_length As HC_INTEGER, tristrips As HC_INTEGER Ptr, face_indices_length As HC_INTEGER, face_indices As HC_INTEGER Ptr) 
Declare Function HC_KInsert_Shell_By_Tristrips Cdecl Alias "HC_KInsert_Shell_By_Tristrips"(pcount As HC_INTEGER, puntos As HC_POINT Ptr, tristrips_length As HC_INTEGER, tristrips As HC_INTEGER Ptr, face_indices_length As HC_INTEGER, face_indices As HC_INTEGER Ptr) As HC_KEY 
Declare Sub HC_QInsert_Shell_By_Tristrips Cdecl Alias "HC_QInsert_Shell_By_Tristrips"(segment As HC_STRING, pcount As HC_INTEGER, puntos As HC_POINT Ptr, tristrips_length As HC_INTEGER, tristrips As HC_INTEGER Ptr, face_indices_length As HC_INTEGER, face_indices As HC_INTEGER Ptr) 
Declare Function HC_QKInsert_Shell_By_Tristrips Cdecl Alias "HC_QKInsert_Shell_By_Tristrips"(segment As HC_STRING, pcount As HC_INTEGER, puntos As HC_POINT Ptr, tristrips_length As HC_INTEGER, tristrips As HC_INTEGER Ptr, face_indices_length As HC_INTEGER, face_indices As HC_INTEGER Ptr) As HC_KEY 
Declare Sub HC_Insert_Shell_From_Region Cdecl Alias "HC_Insert_Shell_From_Region"(key1 As HC_KEY, region As HC_INTEGER, options As HC_STRING) 
Declare Sub HC_QInsert_Shell_From_Region Cdecl Alias "HC_QInsert_Shell_From_Region"(segment As HC_STRING, key1 As HC_KEY, region As HC_INTEGER, options As HC_STRING) 
Declare Function HC_KInsert_Shell_From_Region Cdecl Alias "HC_KInsert_Shell_From_Region"(key1 As HC_KEY, region As HC_INTEGER, options As HC_STRING) As HC_KEY 
Declare Function HC_QKInsert_Shell_From_Region Cdecl Alias "HC_QKInsert_Shell_From_Region"(segment As HC_STRING, key1 As HC_KEY, region As HC_INTEGER, options As HC_STRING) As HC_KEY 
Declare Function HC_KInsert_Sphere Cdecl Alias "HC_KInsert_Sphere"(center As HC_POINT Ptr, radius As HC_DOUBLE, axis As HC_POINT Ptr, ortho As HC_POINT Ptr) As HC_KEY 
Declare Sub HC_QInsert_Sphere Cdecl Alias "HC_QInsert_Sphere"(segment As HC_STRING, center As HC_POINT Ptr, radius As HC_DOUBLE, axis As HC_POINT Ptr, ortho As HC_POINT Ptr) 
Declare Function HC_QKInsert_Sphere Cdecl Alias "HC_QKInsert_Sphere"(segment As HC_STRING, center As HC_POINT Ptr, radius As HC_DOUBLE, axis As HC_POINT Ptr, ortho As HC_POINT Ptr) As HC_KEY 
Declare Sub HC_QInsert_Spot_Light Cdecl Alias "HC_QInsert_Spot_Light"(segment As HC_STRING, position As HC_POINT Ptr, Target_ As HC_POINT Ptr, list As HC_STRING) 
Declare Function HC_QKInsert_Spot_Light Cdecl Alias "HC_QKInsert_Spot_Light"(segment As HC_STRING, position As HC_POINT Ptr, Target_ As HC_POINT Ptr, list As HC_STRING) As HC_KEY 
Declare Sub HC_DInsert_Spot_Light Cdecl Alias "HC_DInsert_Spot_Light"(position As HC_POINT Ptr, Target_ As HC_POINT Ptr, list As HC_STRING) 
Declare Function HC_DKInsert_Spot_Light Cdecl Alias "HC_DKInsert_Spot_Light"(position As HC_POINT Ptr, Target_ As HC_POINT Ptr, list As HC_STRING) As HC_KEY 
Declare Sub HC_DQInsert_Spot_Light Cdecl Alias "HC_DQInsert_Spot_Light"(segment As HC_STRING, position As HC_POINT Ptr, Target_ As HC_POINT Ptr, list As HC_STRING) 
Declare Function HC_DQKInsert_Spot_Light Cdecl Alias "HC_DQKInsert_Spot_Light"(segment As HC_STRING, position As HC_POINT Ptr, Target_ As HC_POINT Ptr, list As HC_STRING) As HC_KEY 
Declare Function HC_KInsert_Text_With_Encoding Cdecl Alias "HC_KInsert_Text_With_Encoding"(x As HC_DOUBLE, y As HC_DOUBLE, z As HC_DOUBLE, encoding_ As HC_STRING, text As HC_STRING) As HC_KEY 
Declare Sub HC_QInsert_Text_With_Encoding Cdecl Alias "HC_QInsert_Text_With_Encoding"(segment As HC_STRING, x As HC_DOUBLE, y As HC_DOUBLE, z As HC_DOUBLE, encoding_ As HC_STRING, text As HC_STRING) 
Declare Function HC_QKInsert_Text_With_Encoding Cdecl Alias "HC_QKInsert_Text_With_Encoding"(segment As HC_STRING, x As HC_DOUBLE, y As HC_DOUBLE, z As HC_DOUBLE, encoding_ As HC_STRING, text As HC_STRING) As HC_KEY 
Declare Sub HC_DInsert_Text Cdecl Alias "HC_DInsert_Text"(x As HC_DOUBLE, y As HC_DOUBLE, z As HC_DOUBLE, text As HC_STRING) 
Declare Function HC_DKInsert_Text Cdecl Alias "HC_DKInsert_Text"(x As HC_DOUBLE, y As HC_DOUBLE, z As HC_DOUBLE, text As HC_STRING) As HC_KEY 
Declare Sub HC_DQInsert_Text Cdecl Alias "HC_DQInsert_Text"(segment As HC_STRING, x As HC_DOUBLE, y As HC_DOUBLE, z As HC_DOUBLE, text As HC_STRING) 
Declare Function HC_DQKInsert_Text Cdecl Alias "HC_DQKInsert_Text"(segment As HC_STRING, x As HC_DOUBLE, y As HC_DOUBLE, z As HC_DOUBLE, text As HC_STRING) As HC_KEY 
Declare Sub HC_DInsert_Text_With_Encoding Cdecl Alias "HC_DInsert_Text_With_Encoding"(x As HC_DOUBLE, y As HC_DOUBLE, z As HC_DOUBLE, encoding_ As HC_STRING, text As HC_STRING) 
Declare Function HC_DKInsert_Text_With_Encoding Cdecl Alias "HC_DKInsert_Text_With_Encoding"(x As HC_DOUBLE, y As HC_DOUBLE, z As HC_DOUBLE, encoding_ As HC_STRING, text As HC_STRING) As HC_KEY 
Declare Sub HC_DQInsert_Text_With_Encoding Cdecl Alias "HC_DQInsert_Text_With_Encoding"(segment As HC_STRING, x As HC_DOUBLE, y As HC_DOUBLE, z As HC_DOUBLE, encoding_ As HC_STRING, text As HC_STRING) 
Declare Function HC_DQKInsert_Text_With_Encoding Cdecl Alias "HC_DQKInsert_Text_With_Encoding"(segment As HC_STRING, x As HC_DOUBLE, y As HC_DOUBLE, z As HC_DOUBLE, encoding_ As HC_STRING, text As HC_STRING) As HC_KEY 
Declare Sub HC_Insert_Unicode_Text Cdecl Alias "HC_Insert_Unicode_Text"(x As HC_DOUBLE, y As HC_DOUBLE, z As HC_DOUBLE, text As HC_PIXEL Ptr) 
Declare Sub HC_QInsert_Unicode_Text Cdecl Alias "HC_QInsert_Unicode_Text"(segment As HC_STRING, x As HC_DOUBLE, y As HC_DOUBLE, z As HC_DOUBLE, text As HC_PIXEL Ptr) 
Declare Function HC_KInsert_Unicode_Text Cdecl Alias "HC_KInsert_Unicode_Text"(x As HC_DOUBLE, y As HC_DOUBLE, z As HC_DOUBLE, text As HC_PIXEL Ptr) As HC_KEY 
Declare Function HC_QKInsert_Unicode_Text Cdecl Alias "HC_QKInsert_Unicode_Text"(segment As HC_STRING, x As HC_DOUBLE, y As HC_DOUBLE, z As HC_DOUBLE, text As HC_PIXEL Ptr) As HC_KEY 
Declare Function HC_KCompute_Boolean_Shell Cdecl Alias "HC_KCompute_Boolean_Shell"(targetpcount As HC_INTEGER, targetpoints As HC_POINT Ptr, targetnormals As HC_POINT Ptr, targetflist_length As HC_INTEGER, targetface_list As HC_INTEGER Ptr, toolpcount As HC_INTEGER, toolpoints As HC_POINT Ptr, toolnormals As HC_POINT Ptr, toolflist_length As HC_INTEGER, toolface_list As HC_INTEGER Ptr, options As HC_STRING) As HC_KEY 
Declare Function HC_KShow_Original_Key Cdecl Alias "HC_KShow_Original_Key"(key As HC_KEY) As HC_KEY 
Declare Sub HC_DMove_Distant_Light Cdecl Alias "HC_DMove_Distant_Light"(key As HC_KEY, di As HC_DOUBLE, dj As HC_DOUBLE, dk As HC_DOUBLE) 
Declare Sub HC_Move_Image Cdecl Alias "HC_Move_Image"(key As HC_KEY, x As HC_DOUBLE, y As HC_DOUBLE, z As HC_DOUBLE) 
Declare Sub HC_DMove_Image Cdecl Alias "HC_DMove_Image"(key As HC_KEY, x As HC_DOUBLE, y As HC_DOUBLE, z As HC_DOUBLE) 
Declare Sub HC_Move_Light_Position Cdecl Alias "HC_Move_Light_Position"(key As HC_KEY, x As HC_DOUBLE, y As HC_DOUBLE, z As HC_DOUBLE) 
Declare Sub HC_Move_Text Cdecl Alias "HC_Move_Text"(key As HC_KEY, x As HC_DOUBLE, y As HC_DOUBLE, z As HC_DOUBLE) 
Declare Sub HC_MSet_Character_Attributes Cdecl Alias "HC_MSet_Character_Attributes"(key As HC_KEY, offset As HC_INTEGER, count As HC_INTEGER, options As HC_STRING) 
Declare Sub HC_MUnSet_Character_Attributes Cdecl Alias "HC_MUnSet_Character_Attributes"(key As HC_KEY, offset As HC_INTEGER, count As HC_INTEGER, options As HC_STRING) 
Declare Sub HC_MSet_Face_Colors_By_FIndex Cdecl Alias "HC_MSet_Face_Colors_By_FIndex"(key As HC_KEY, color_tipo As HC_STRING, offset As HC_INTEGER, count As HC_INTEGER, findices As HC_SINGLE Ptr) 
Declare Sub HC_MSet_Specific_Face_Colors_By_FIndex Cdecl Alias "HC_MSet_Specific_Face_Colors_By_FIndex"(key As HC_KEY, count As HC_INTEGER, faces As HC_INTEGER Ptr, findices As HC_SINGLE Ptr) 
Declare Sub HC_MSet_Face_Colors_By_Value Cdecl Alias "HC_MSet_Face_Colors_By_Value"(key As HC_KEY, color_type As HC_STRING, offset As HC_INTEGER, color_space As HC_STRING, count As HC_INTEGER, values As HC_POINT Ptr) 
Declare Sub HC_MSet_Face_Regions Cdecl Alias "HC_MSet_Face_Regions"(key As HC_KEY, first_face As HC_INTEGER, face_count As HC_INTEGER, regions As HC_INTEGER Ptr) 
Declare Sub HC_MSet_Face_Visibilities Cdecl Alias "HC_MSet_Face_Visibilities"(key As HC_KEY, offset As HC_INTEGER, count As HC_INTEGER, settings As HC_STRING) 
Declare Sub HC_MUnSet_Face_Visibilities Cdecl Alias "HC_MUnSet_Face_Visibilities"(key As HC_KEY, offset As HC_INTEGER, count As HC_INTEGER) 
Declare Sub HC_MSet_Face_Visibilities_By_Index Cdecl Alias "HC_MSet_Face_Visibilities_By_Index"(key As HC_KEY, size As HC_INTEGER, count As HC_INTEGER Ptr, settings As HC_STRING) 
Declare Sub HC_MUnSet_Face_Visibilities_By_Index Cdecl Alias "HC_MUnSet_Face_Visibilities_By_Index"(key As HC_KEY, size As HC_INTEGER, count As HC_INTEGER Ptr) 
Declare Sub HC_MSet_Region_Faces Cdecl Alias "HC_MSet_Region_Faces"(key As HC_KEY, region As HC_INTEGER, first_face As HC_INTEGER, face_count As HC_INTEGER) 
Declare Sub HC_MSet_Vertex_Colors_By_FIndex Cdecl Alias "HC_MSet_Vertex_Colors_By_FIndex"(key As HC_KEY, types As HC_STRING, offset As HC_INTEGER, count As HC_INTEGER, findices As HC_SINGLE Ptr) 
Declare Sub HC_MSet_Vertex_Colors_By_Value Cdecl Alias "HC_MSet_Vertex_Colors_By_Value"(key As HC_KEY, types As HC_STRING, offset As HC_INTEGER, color_space As HC_STRING, count As HC_INTEGER, values As HC_POINT Ptr) 
Declare Sub HC_MSet_Vertex_Normals Cdecl Alias "HC_MSet_Vertex_Normals"(key As HC_KEY, offset As HC_INTEGER, count As HC_INTEGER, normals As HC_POINT Ptr) 
Declare Sub HC_MSet_Vertex_Parameters Cdecl Alias "HC_MSet_Vertex_Parameters"(key As HC_KEY, offset As HC_INTEGER, pcount As HC_INTEGER, number As HC_INTEGER, parameters As HC_SINGLE Ptr) 
Declare Sub HC_MShow_Character_Attributes Cdecl Alias "HC_MShow_Character_Attributes"(key As HC_KEY, offset As HC_INTEGER, count As HC_INTEGER, options As HC_STRING) 
Declare Sub HC_Show_One_Character_Attribute Cdecl Alias "HC_Show_One_Character_Attribute"(key As HC_KEY, offset As HC_INTEGER, which As HC_STRING, options As HC_STRING) 
Declare Sub HC_Show_Character_Attribute_Count Cdecl Alias "HC_Show_Character_Attribute_Count"(key As HC_KEY, count As HC_INTEGER Ptr) 
Declare Sub HC_MShow_Face_Colors_By_FIndex Cdecl Alias "HC_MShow_Face_Colors_By_FIndex"(key As HC_KEY, foffset As HC_INTEGER, fcount As HC_INTEGER, values As HC_SINGLE Ptr) 
Declare Sub HC_MShow_Face_Colors_By_Value Cdecl Alias "HC_MShow_Face_Colors_By_Value"(key As HC_KEY, foffset As HC_INTEGER, fcount As HC_INTEGER, RGB As HC_POINT Ptr) 
Declare Sub HC_MShow_Face_Regions Cdecl Alias "HC_MShow_Face_Regions"(key As HC_KEY, face_count As HC_INTEGER Ptr, regions As HC_INTEGER Ptr) 
Declare Sub HC_MShow_Face_Regions_Count Cdecl Alias "HC_MShow_Face_Regions_Count"(key As HC_KEY, face_count As HC_INTEGER Ptr) 
Declare Sub HC_MShow_Face_Visibilities Cdecl Alias "HC_MShow_Face_Visibilities"(key As HC_KEY, offset As HC_INTEGER, count As HC_INTEGER, settings As HC_STRING) 
Declare Sub HC_MShow_Face_Visibilities_By_Index Cdecl Alias "HC_MShow_Face_Visibilities_By_Index"(key As HC_KEY, size As HC_INTEGER, offsets As HC_INTEGER Ptr, settings As HC_STRING) 
Declare Sub HC_MShow_Partial_Face_Regions Cdecl Alias "HC_MShow_Partial_Face_Regions"(key As HC_KEY, first_face As HC_INTEGER, face_count As HC_INTEGER, regions As HC_INTEGER Ptr) 
Declare Sub HC_MShow_Region_Faces Cdecl Alias "HC_MShow_Region_Faces"(key As HC_KEY, region As HC_INTEGER, face_count As HC_INTEGER Ptr, faces As HC_INTEGER Ptr) 
Declare Sub HC_MShow_Region_Faces_Count Cdecl Alias "HC_MShow_Region_Faces_Count"(key As HC_KEY, region As HC_INTEGER, face_count As HC_INTEGER Ptr) 
Declare Sub HC_MShow_Vertex_Colors_By_FInd Cdecl Alias "HC_MShow_Vertex_Colors_By_FInd"(key As HC_KEY, tipo As HC_STRING, offset As HC_INTEGER, pcount As HC_INTEGER, values As HC_SINGLE Ptr) 
Declare Sub HC_MShow_Vertex_Colors_By_Value Cdecl Alias "HC_MShow_Vertex_Colors_By_Value"(key As HC_KEY, tipo As HC_STRING, offset As HC_INTEGER, pcount As HC_INTEGER, RGB_ As HC_POINT Ptr) 
Declare Sub HC_MShow_Vertex_Normals Cdecl Alias "HC_MShow_Vertex_Normals"(key As HC_KEY, offset As HC_INTEGER, pcount As HC_INTEGER, normals As HC_POINT Ptr) 
Declare Sub HC_MShow_Net_Vertex_Normals Cdecl Alias "HC_MShow_Net_Vertex_Normals"(key As HC_KEY, offset As HC_INTEGER, pcount As HC_INTEGER, normals As HC_POINT Ptr) 
Declare Sub HC_MShow_Vertex_Parameters Cdecl Alias "HC_MShow_Vertex_Parameters"(key As HC_KEY, offset As HC_INTEGER, pcount As HC_INTEGER, number As HC_INTEGER Ptr, params As HC_SINGLE Ptr) 
Declare Sub HC_MShow_Vertex_Parameter_Size Cdecl Alias "HC_MShow_Vertex_Parameter_Size"(key As HC_KEY, number As HC_INTEGER Ptr) 
Declare Sub HC_Open_Edge Cdecl Alias "HC_Open_Edge"(offset1 As HC_INTEGER, offset2 As HC_INTEGER) 
Declare Sub HC_Close_Edge Cdecl Alias "HC_Close_Edge"() 
Declare Sub HC_Open_LOD Cdecl Alias "HC_Open_LOD"(level As HC_INTEGER) 
Declare Sub HC_Close_LOD Cdecl Alias "HC_Close_LOD"() 
Declare Sub HC_Open_Region Cdecl Alias "HC_Open_Region"(region As HC_INTEGER) 
Declare Sub HC_Close_Region Cdecl Alias "HC_Close_Region"() 
Declare Sub HC_Record_Instance_Handle Cdecl Alias "HC_Record_Instance_Handle"(handle As HC_INTEGER Ptr) 
Declare Sub HC_Record_Profile_Source Cdecl Alias "HC_Record_Profile_Source"(section As HC_STRING, filename As HC_STRING) 
Declare Sub HC_Regenerate_LOD Cdecl Alias "HC_Regenerate_LOD"(segment As HC_STRING, options As HC_STRING) 
Declare Sub HC_Regenerate_LOD_By_Key Cdecl Alias "HC_Regenerate_LOD_By_Key"(segKey As HC_KEY, options As HC_STRING) 
Declare Sub HC_Relinquish_Memory Cdecl Alias "HC_Relinquish_Memory"() 
Declare Sub HC_Renumber_Key Cdecl Alias "HC_Renumber_Key"(oldkey As HC_KEY, newkey As HC_KEY, Scope_ As HC_STRING) 
Declare Function HC_KRenumber_Key Cdecl Alias "HC_KRenumber_Key"(oldkey As HC_KEY, newkey As HC_KEY, Scope_ As HC_STRING) As HC_KEY 
Declare Sub HC_Rotate_Texture Cdecl Alias "HC_Rotate_Texture"(theta As HC_DOUBLE, phi As HC_DOUBLE, psi As HC_DOUBLE) 
Declare Sub HC_QRotate_Texture Cdecl Alias "HC_QRotate_Texture"(segment As HC_STRING, theta As HC_DOUBLE, phi As HC_DOUBLE, psi As HC_DOUBLE) 
Declare Sub HC_Rotate_Texture_Offaxis Cdecl Alias "HC_Rotate_Texture_Offaxis"(x As HC_DOUBLE, y As HC_DOUBLE, z As HC_DOUBLE, theta As HC_DOUBLE) 
Declare Sub HC_QRotate_Texture_Offaxis Cdecl Alias "HC_QRotate_Texture_Offaxis"(segment As HC_STRING, x As HC_DOUBLE, y As HC_DOUBLE, z As HC_DOUBLE, theta As HC_DOUBLE) 
Declare Sub HC_Scale_Texture Cdecl Alias "HC_Scale_Texture"(u As HC_DOUBLE, v As HC_DOUBLE, w As HC_DOUBLE) 
Declare Sub HC_QScale_Texture Cdecl Alias "HC_QScale_Texture"(segment As HC_STRING, u As HC_DOUBLE, v As HC_DOUBLE, w As HC_DOUBLE) 
Declare Sub HC_Set_Bounding_Cuboid Cdecl Alias "HC_Set_Bounding_Cuboid"(min As HC_POINT Ptr, max As HC_POINT Ptr) 
Declare Sub HC_QSet_Bounding_Cuboid Cdecl Alias "HC_QSet_Bounding_Cuboid"(segment As HC_STRING, min As HC_POINT Ptr, max As HC_POINT Ptr) 
Declare Sub HC_Set_Bounding_Cuboid_By_Key Cdecl Alias "HC_Set_Bounding_Cuboid_By_Key"(key As HC_KEY, min As HC_POINT Ptr, max As HC_POINT Ptr) 
Declare Sub HC_Set_Bounding_Sphere Cdecl Alias "HC_Set_Bounding_Sphere"(center As HC_POINT Ptr, radius As HC_DOUBLE) 
Declare Sub HC_QSet_Bounding_Sphere Cdecl Alias "HC_QSet_Bounding_Sphere"(segment As HC_STRING, center As HC_POINT Ptr, radius As HC_DOUBLE) 
Declare Sub HC_Set_Bounding_Sphere_By_Key Cdecl Alias "HC_Set_Bounding_Sphere_By_Key"(key As HC_KEY, center As HC_POINT Ptr, radius As HC_DOUBLE) 
Declare Sub HC_Set_Callback Cdecl Alias "HC_Set_Callback"(callbacks As HC_STRING) 
Declare Sub HC_QSet_Callback Cdecl Alias "HC_QSet_Callback"(segment As HC_STRING, callbacks As HC_STRING) 
Declare Sub HC_QUnSet_Callback Cdecl Alias "HC_QUnSet_Callback"(segment As HC_STRING) 
Declare Sub HC_QUnSet_One_Callback Cdecl Alias "HC_QUnSet_One_Callback"(segment As HC_STRING, callbacks As HC_STRING) 
Declare Sub HC_UnSet_Callback Cdecl Alias "HC_UnSet_Callback"() 
Declare Sub HC_UnSet_One_Callback Cdecl Alias "HC_UnSet_One_Callback"(callbacks As HC_STRING) 
Declare Sub HC_Set_Camera_Near_Limit Cdecl Alias "HC_Set_Camera_Near_Limit"(wlimit As HC_DOUBLE) 
Declare Sub HC_QSet_Camera_Near_Limit Cdecl Alias "HC_QSet_Camera_Near_Limit"(segment As HC_STRING, wlimit As HC_DOUBLE) 
Declare Sub HC_Set_Circular_Center Cdecl Alias "HC_Set_Circular_Center"(x As HC_DOUBLE, y As HC_DOUBLE, z As HC_DOUBLE) 
Declare Sub HC_Set_Circular_Center_By_Key Cdecl Alias "HC_Set_Circular_Center_By_Key"(key As HC_KEY, x As HC_DOUBLE, y As HC_DOUBLE, z As HC_DOUBLE) 
Declare Sub HC_UnSet_One_Color Cdecl Alias "HC_UnSet_One_Color"(which As HC_STRING) 
Declare Sub HC_QUnSet_One_Color Cdecl Alias "HC_QUnSet_One_Color"(segment As HC_STRING, which As HC_STRING) 
Declare Sub HC_QSet_Color_By_FIndex Cdecl Alias "HC_QSet_Color_By_FIndex"(segment As HC_STRING, types As HC_STRING, findex As HC_DOUBLE) 
Declare Sub HC_Set_Conditions Cdecl Alias "HC_Set_Conditions"(list As HC_STRING) 
Declare Sub HC_QSet_Conditions Cdecl Alias "HC_QSet_Conditions"(segment As HC_STRING, list As HC_STRING) 
Declare Sub HC_UnSet_Conditions Cdecl Alias "HC_UnSet_Conditions"() 
Declare Sub HC_UnSet_One_Condition Cdecl Alias "HC_UnSet_One_Condition"(condition As HC_STRING) 
Declare Sub HC_QUnSet_Conditions Cdecl Alias "HC_QUnSet_Conditions"(segment As HC_STRING) 
Declare Sub HC_QUnSet_One_Condition Cdecl Alias "HC_QUnSet_One_Condition"(segment As HC_STRING, condition As HC_STRING) 
Declare Sub HC_UnSet_One_Driver_Option Cdecl Alias "HC_UnSet_One_Driver_Option"(which As HC_STRING) 
Declare Sub HC_QUnSet_One_Driver_Option Cdecl Alias "HC_QUnSet_One_Driver_Option"(segment As HC_STRING, which As HC_STRING) 
Declare Sub HC_Set_Faces Cdecl Alias "HC_Set_Faces"(first_face As HC_INTEGER, face_count As HC_INTEGER) 
Declare Sub HC_UnSet_One_Heuristic Cdecl Alias "HC_UnSet_One_Heuristic"(which As HC_STRING) 
Declare Sub HC_QUnSet_One_Heuristic Cdecl Alias "HC_QUnSet_One_Heuristic"(segment As HC_STRING, which As HC_STRING) 
Declare Sub HC_UnSet_One_Metafile Cdecl Alias "HC_UnSet_One_Metafile"(which As HC_STRING) 
Declare Sub HC_QUnSet_One_Metafile Cdecl Alias "HC_QUnSet_One_Metafile"(segment As HC_STRING, which As HC_STRING) 
Declare Sub HC_Set_Normal Cdecl Alias "HC_Set_Normal"(x As HC_DOUBLE, y As HC_DOUBLE, z As HC_DOUBLE) 
Declare Sub HC_UnSet_Normal Cdecl Alias "HC_UnSet_Normal"() 
Declare Sub HC_Set_Parameter Cdecl Alias "HC_Set_Parameter"(number As HC_INTEGER, parameters As HC_SINGLE Ptr) 
Declare Sub HC_UnSet_Parameter Cdecl Alias "HC_UnSet_Parameter"() 
Declare Sub HC_Set_Polygonal_Clip_Region Cdecl Alias "HC_Set_Polygonal_Clip_Region"(count As HC_INTEGER, puntos As HC_POINT Ptr, options As HC_STRING) 
Declare Sub HC_QSet_Polygonal_Clip_Region Cdecl Alias "HC_QSet_Polygonal_Clip_Region"(segment As HC_STRING, count As HC_INTEGER, puntos As HC_POINT Ptr, options As HC_STRING) 
Declare Sub HC_UnSet_Clip_Region Cdecl Alias "HC_UnSet_Clip_Region"() 
Declare Sub HC_QUnSet_Clip_Region Cdecl Alias "HC_QUnSet_Clip_Region"(segment As HC_STRING) 
Declare Sub HC_Set_Priority Cdecl Alias "HC_Set_Priority"(key As HC_KEY, priority As Long) 
Declare Sub HC_Set_Region Cdecl Alias "HC_Set_Region"(region As HC_INTEGER) 
Declare Sub HC_QSet_Rendering_Options Cdecl Alias "HC_QSet_Rendering_Options"(segment As HC_STRING, list As HC_STRING) 
Declare Sub HC_UnSet_Rendering_Options Cdecl Alias "HC_UnSet_Rendering_Options"() 
Declare Sub HC_UnSet_One_Rendering_Option Cdecl Alias "HC_UnSet_One_Rendering_Option"(which As HC_STRING) 
Declare Sub HC_QUnSet_Rendering_Options Cdecl Alias "HC_QUnSet_Rendering_Options"(segment As HC_STRING) 
Declare Sub HC_QUnSet_One_Rendering_Option Cdecl Alias "HC_QUnSet_One_Rendering_Option"(segment As HC_STRING, which As HC_STRING) 
Declare Sub HC_UnSet_One_Selectability Cdecl Alias "HC_UnSet_One_Selectability"(which As HC_STRING) 
Declare Sub HC_QUnSet_One_Selectability Cdecl Alias "HC_QUnSet_One_Selectability"(segment As HC_STRING, which As HC_STRING) 
Declare Sub HC_Set_Texture_Matrix Cdecl Alias "HC_Set_Texture_Matrix"(matrix As HC_SINGLE Ptr) 
Declare Sub HC_QSet_Texture_Matrix Cdecl Alias "HC_QSet_Texture_Matrix"(segment As HC_STRING, matrix As HC_SINGLE Ptr) 
Declare Sub HC_UnSet_Texture_Matrix Cdecl Alias "HC_UnSet_Texture_Matrix"() 
Declare Sub HC_QUnSet_Texture_Matrix Cdecl Alias "HC_QUnSet_Texture_Matrix"(segment As HC_STRING) 
Declare Sub HC_UnSet_One_Text_Font Cdecl Alias "HC_UnSet_One_Text_Font"(which As HC_STRING) 
Declare Sub HC_QUnSet_One_Text_Font Cdecl Alias "HC_QUnSet_One_Text_Font"(segment As HC_STRING, which As HC_STRING) 
Declare Sub HC_Set_Text_Region Cdecl Alias "HC_Set_Text_Region"(pCount As HC_INTEGER, puntos As HC_POINT Ptr, options As HC_STRING) 
Declare Sub HC_UnSet_Text_Region Cdecl Alias "HC_UnSet_Text_Region"() 
Declare Sub HC_Set_Unicode_Options Cdecl Alias "HC_Set_Unicode_Options"(options As HC_PIXEL Ptr) 
Declare Sub HC_QSet_Unicode_Options Cdecl Alias "HC_QSet_Unicode_Options"(segment As HC_STRING, options As HC_PIXEL Ptr) 
Declare Sub HC_UnSet_Unicode_Options Cdecl Alias "HC_UnSet_Unicode_Options"() 
Declare Sub HC_QUnSet_Unicode_Options Cdecl Alias "HC_QUnSet_Unicode_Options"(segment As HC_STRING) 
Declare Sub HC_UnSet_One_Unicode_Option Cdecl Alias "HC_UnSet_One_Unicode_Option"(which As HC_PIXEL Ptr) 
Declare Sub HC_QUnSet_One_Unicode_Option Cdecl Alias "HC_QUnSet_One_Unicode_Option"(segment As HC_STRING, which As HC_PIXEL Ptr) 
Declare Sub HC_Set_User_Index Cdecl Alias "HC_Set_User_Index"(index As Long, dato As HC_INTEGER Ptr) 
Declare Sub HC_QSet_User_Index Cdecl Alias "HC_QSet_User_Index"(segment As HC_STRING, index As Long, dato As HC_INTEGER Ptr) 
Declare Sub HC_UnSet_One_User_Option Cdecl Alias "HC_UnSet_One_User_Option"(which As HC_STRING) 
Declare Sub HC_UnSet_One_User_Index Cdecl Alias "HC_UnSet_One_User_Index"(index As Long) 
Declare Sub HC_QUnSet_One_User_Option Cdecl Alias "HC_QUnSet_One_User_Option"(segment As HC_STRING, which As HC_STRING) 
Declare Sub HC_QUnSet_One_User_Index Cdecl Alias "HC_QUnSet_One_User_Index"(segment As HC_STRING, index As Long) 
Declare Sub HC_Set_Variable_Edge_Weight Cdecl Alias "HC_Set_Variable_Edge_Weight"(weight As HC_STRING) 
Declare Sub HC_QSet_Variable_Edge_Weight Cdecl Alias "HC_QSet_Variable_Edge_Weight"(segment As HC_STRING, weight As HC_STRING) 
Declare Sub HC_Set_Variable_Line_Weight Cdecl Alias "HC_Set_Variable_Line_Weight"(weight As HC_STRING) 
Declare Sub HC_QSet_Variable_Line_Weight Cdecl Alias "HC_QSet_Variable_Line_Weight"(segment As HC_STRING, weight As HC_STRING) 
Declare Sub HC_Set_Variable_Marker_Size Cdecl Alias "HC_Set_Variable_Marker_Size"(size As HC_STRING) 
Declare Sub HC_QSet_Variable_Marker_Size Cdecl Alias "HC_QSet_Variable_Marker_Size"(segment As HC_STRING, size As HC_STRING) 
Declare Sub HC_UnSet_One_Visibility Cdecl Alias "HC_UnSet_One_Visibility"(which As HC_STRING) 
Declare Sub HC_QUnSet_One_Visibility Cdecl Alias "HC_QUnSet_One_Visibility"(segment As HC_STRING, which As HC_STRING) 
Declare Function HC_Show_Bounding_Cuboid Cdecl Alias "HC_Show_Bounding_Cuboid"(min As HC_POINT Ptr, max As HC_POINT Ptr) As HC_BOOLEAN 
Declare Function HC_QShow_Bounding_Cuboid Cdecl Alias "HC_QShow_Bounding_Cuboid"(segment As HC_STRING, min As HC_POINT Ptr, max As HC_POINT Ptr) As HC_BOOLEAN 
Declare Function HC_Show_Bounding_Cuboid_By_Key Cdecl Alias "HC_Show_Bounding_Cuboid_By_Key"(key As HC_KEY, min As HC_POINT Ptr, max As HC_POINT Ptr) As HC_BOOLEAN 
Declare Sub HC_Show_Bounding_Info Cdecl Alias "HC_Show_Bounding_Info"(list As HC_STRING) 
Declare Sub HC_QShow_Bounding_Info Cdecl Alias "HC_QShow_Bounding_Info"(segment As HC_STRING, list As HC_STRING) 
Declare Sub HC_Show_Bounding_Info_By_Key Cdecl Alias "HC_Show_Bounding_Info_By_Key"(key As HC_KEY, list As HC_STRING) 
Declare Function HC_Show_Bounding_Sphere Cdecl Alias "HC_Show_Bounding_Sphere"(center As HC_POINT Ptr, radius As HC_SINGLE Ptr) As HC_BOOLEAN 
Declare Function HC_QShow_Bounding_Sphere Cdecl Alias "HC_QShow_Bounding_Sphere"(segment As HC_STRING, center As HC_POINT Ptr, radius As HC_SINGLE Ptr) As HC_BOOLEAN 
Declare Function HC_Show_Bounding_Sphere_By_Key Cdecl Alias "HC_Show_Bounding_Sphere_By_Key"(key As HC_KEY, center As HC_POINT Ptr, radius As HC_SINGLE Ptr) As HC_BOOLEAN 
Declare Sub HC_Show_Callback Cdecl Alias "HC_Show_Callback"(callbacks As HC_STRING) 
Declare Sub HC_Show_Net_Callback Cdecl Alias "HC_Show_Net_Callback"(callbacks As HC_STRING) 
Declare Sub HC_Show_One_Callback Cdecl Alias "HC_Show_One_Callback"(callback_point As HC_STRING, callback_name As HC_STRING) 
Declare Sub HC_Show_One_Net_Callback Cdecl Alias "HC_Show_One_Net_Callback"(callback_point As HC_STRING, callback_name As HC_STRING) 
Declare Sub HC_PShow_Net_Callback Cdecl Alias "HC_PShow_Net_Callback"(count As HC_INTEGER, keys As HC_KEY Ptr, callbacks As HC_STRING) 
Declare Sub HC_PShow_One_Net_Callback Cdecl Alias "HC_PShow_One_Net_Callback"(count As HC_INTEGER, keys As HC_KEY Ptr, callback_point As HC_STRING, callback_name As HC_STRING) 
Declare Sub HC_QShow_Callback Cdecl Alias "HC_QShow_Callback"(segment As HC_STRING, callbacks As HC_STRING) 
Declare Sub HC_QShow_Net_Callback Cdecl Alias "HC_QShow_Net_Callback"(segment As HC_STRING, callbacks As HC_STRING) 
Declare Sub HC_QShow_One_Callback Cdecl Alias "HC_QShow_One_Callback"(segment As HC_STRING, callback_point As HC_STRING, callback_name As HC_STRING) 
Declare Sub HC_QShow_One_Net_Callback Cdecl Alias "HC_QShow_One_Net_Callback"(segment As HC_STRING, callback_point As HC_STRING, callback_name As HC_STRING) 
Declare Sub HC_PShow_Net_Camera Cdecl Alias "HC_PShow_Net_Camera"(count As HC_INTEGER, keys As HC_KEY Ptr, position As HC_POINT Ptr, Target_ As HC_POINT Ptr, up As HC_POINT Ptr, width_ As HC_SINGLE Ptr, height As HC_SINGLE Ptr, projection As HC_STRING) 
Declare Sub HC_PShow_Net_Camera_Field Cdecl Alias "HC_PShow_Net_Camera_Field"(count As HC_INTEGER, keys As HC_KEY Ptr, width_ As HC_SINGLE Ptr, height As HC_SINGLE Ptr) 
Declare Sub HC_PShow_Net_Camera_Position Cdecl Alias "HC_PShow_Net_Camera_Position"(count As HC_INTEGER, keys As HC_KEY Ptr, x As HC_SINGLE Ptr, y As HC_SINGLE Ptr, z As HC_SINGLE Ptr) 
Declare Sub HC_PShow_Net_Camera_Projection Cdecl Alias "HC_PShow_Net_Camera_Projection"(count As HC_INTEGER, keys As HC_KEY Ptr, projection As HC_STRING) 
Declare Sub HC_PShow_Net_Camera_Target Cdecl Alias "HC_PShow_Net_Camera_Target"(count As HC_INTEGER, keys As HC_KEY Ptr, x As HC_SINGLE Ptr, y As HC_SINGLE Ptr, z As HC_SINGLE Ptr) 
Declare Sub HC_PShow_Net_Camera_Up_Vector Cdecl Alias "HC_PShow_Net_Camera_Up_Vector"(count As HC_INTEGER, keys As HC_KEY Ptr, x As HC_SINGLE Ptr, y As HC_SINGLE Ptr, z As HC_SINGLE Ptr) 
Declare Sub HC_Show_Camera_Near_Limit Cdecl Alias "HC_Show_Camera_Near_Limit"(wlimit As HC_SINGLE Ptr) 
Declare Sub HC_QShow_Camera_Near_Limit Cdecl Alias "HC_QShow_Camera_Near_Limit"(segment As HC_STRING, wlimit As HC_SINGLE Ptr) 
Declare Sub HC_DShow_Circle Cdecl Alias "HC_DShow_Circle"(key As HC_KEY, point1 As HC_POINT Ptr, point2 As HC_POINT Ptr, point3 As HC_POINT Ptr) 
Declare Sub HC_DShow_Circular_Arc Cdecl Alias "HC_DShow_Circular_Arc"(key As HC_KEY, point1 As HC_POINT Ptr, point2 As HC_POINT Ptr, point3 As HC_POINT Ptr) 
Declare Function HC_Show_Circular_Center Cdecl Alias "HC_Show_Circular_Center"(key As HC_KEY, x As HC_SINGLE Ptr, y As HC_SINGLE Ptr, z As HC_SINGLE Ptr) As HC_BOOLEAN 
Declare Sub HC_Show_Circular_Chord Cdecl Alias "HC_Show_Circular_Chord"(key As HC_KEY, point1 As HC_POINT Ptr, point2 As HC_POINT Ptr, point3 As HC_POINT Ptr) 
Declare Sub HC_DShow_Circular_Chord Cdecl Alias "HC_DShow_Circular_Chord"(key As HC_KEY, point1 As HC_POINT Ptr, point2 As HC_POINT Ptr, point3 As HC_POINT Ptr) 
Declare Sub HC_Show_Circular_Wedge Cdecl Alias "HC_Show_Circular_Wedge"(key As HC_KEY, point1 As HC_POINT Ptr, point2 As HC_POINT Ptr, point3 As HC_POINT Ptr) 
Declare Sub HC_DShow_Circular_Wedge Cdecl Alias "HC_DShow_Circular_Wedge"(key As HC_KEY, point1 As HC_POINT Ptr, point2 As HC_POINT Ptr, point3 As HC_POINT Ptr) 
Declare Sub HC_Show_Clip_Region Cdecl Alias "HC_Show_Clip_Region"(clipCount As HC_INTEGER Ptr, clipSizeArray As HC_INTEGER Ptr, puntos As HC_POINT Ptr, options As HC_STRING) 
Declare Sub HC_Show_Clip_Region_Size Cdecl Alias "HC_Show_Clip_Region_Size"(clipCount As HC_INTEGER Ptr, clipSizeArray As HC_INTEGER Ptr, options As HC_STRING) 
Declare Sub HC_Show_Net_Clip_Region_Size Cdecl Alias "HC_Show_Net_Clip_Region_Size"(clipCount As HC_INTEGER Ptr, clipSizeArray As HC_INTEGER Ptr, options As HC_STRING) 
Declare Sub HC_Show_Net_Clip_Region Cdecl Alias "HC_Show_Net_Clip_Region"(clipCount As HC_INTEGER Ptr, clipSizeArray As HC_INTEGER Ptr, puntos As HC_POINT Ptr, options As HC_STRING) 
Declare Sub HC_QShow_Clip_Region Cdecl Alias "HC_QShow_Clip_Region"(segment As HC_STRING, clipCount As HC_INTEGER Ptr, clipSizeArray As HC_INTEGER Ptr, puntos As HC_POINT Ptr, options As HC_STRING) 
Declare Sub HC_QShow_Clip_Region_Size Cdecl Alias "HC_QShow_Clip_Region_Size"(segment As HC_STRING, clipCount As HC_INTEGER Ptr, clipSizeArray As HC_INTEGER Ptr, options As HC_STRING) 
Declare Sub HC_QShow_Net_Clip_Region Cdecl Alias "HC_QShow_Net_Clip_Region"(segment As HC_STRING, clipCount As HC_INTEGER Ptr, clipSizeArray As HC_INTEGER Ptr, puntos As HC_POINT Ptr, options As HC_STRING) 
Declare Sub HC_QShow_Net_Clip_Region_Size Cdecl Alias "HC_QShow_Net_Clip_Region_Size"(segment As HC_STRING, clipCount As HC_INTEGER Ptr, clipSizeArray As HC_INTEGER Ptr, options As HC_STRING) 
Declare Sub HC_PShow_Net_Clip_Region Cdecl Alias "HC_PShow_Net_Clip_Region"(keyCount As HC_INTEGER, keys As HC_KEY Ptr, clipCount As HC_INTEGER Ptr, clipSizeArray As HC_INTEGER Ptr, puntos As HC_POINT Ptr, options As HC_STRING) 
Declare Sub HC_PShow_Net_Clip_Region_Size Cdecl Alias "HC_PShow_Net_Clip_Region_Size"(keyCount As HC_INTEGER, keys As HC_KEY Ptr, clipCount As HC_INTEGER Ptr, clipSizeArray As HC_INTEGER Ptr, options As HC_STRING) 
Declare Sub HC_PShow_Net_Color Cdecl Alias "HC_PShow_Net_Color"(count As HC_INTEGER, keys As HC_KEY Ptr, color_spec As HC_STRING) 
Declare Sub HC_PShow_Net_Color_By_Index Cdecl Alias "HC_PShow_Net_Color_By_Index"(count As HC_INTEGER, keys As HC_KEY Ptr, types As HC_STRING, index As HC_INTEGER Ptr) 
Declare Sub HC_PShow_Net_Color_By_Value Cdecl Alias "HC_PShow_Net_Color_By_Value"(count As HC_INTEGER, keys As HC_KEY Ptr, types As HC_STRING, colorspace As HC_STRING, a As HC_SINGLE Ptr, b As HC_SINGLE Ptr, c As HC_SINGLE Ptr) 
Declare Sub HC_PShow_Net_Color_Map Cdecl Alias "HC_PShow_Net_Color_Map"(count As HC_INTEGER, keys As HC_KEY Ptr, colors As HC_STRING) 
Declare Sub HC_PShow_Net_Color_Map_By_Value Cdecl Alias "HC_PShow_Net_Color_Map_By_Value"(count As HC_INTEGER, keys As HC_KEY Ptr, color_space As HC_STRING, count As HC_INTEGER Ptr, values As HC_POINT Ptr) 
Declare Sub HC_PShow_Net_Color_Map_Count Cdecl Alias "HC_PShow_Net_Color_Map_Count"(kcount As HC_INTEGER, keys As HC_KEY Ptr, count As HC_INTEGER Ptr) 
Declare Sub HC_Show_Conditional_Include Cdecl Alias "HC_Show_Conditional_Include"(key As HC_KEY, pathname As HC_STRING, conditions As HC_STRING) 
Declare Sub HC_Show_Conditional_Style Cdecl Alias "HC_Show_Conditional_Style"(key As HC_KEY, pathname As HC_STRING, conditions As HC_STRING) 
Declare Sub HC_Show_Conditions Cdecl Alias "HC_Show_Conditions"(list As HC_STRING) 
Declare Sub HC_QShow_Conditions Cdecl Alias "HC_QShow_Conditions"(segment As HC_STRING, list As HC_STRING) 
Declare Sub HC_Show_Net_Conditions Cdecl Alias "HC_Show_Net_Conditions"(list As HC_STRING) 
Declare Sub HC_QShow_Net_Conditions Cdecl Alias "HC_QShow_Net_Conditions"(segment As HC_STRING, list As HC_STRING) 
Declare Sub HC_PShow_Net_Conditions Cdecl Alias "HC_PShow_Net_Conditions"(count As HC_INTEGER, keys As HC_KEY Ptr, list As HC_STRING) 
Declare Sub HC_Show_Conditions_Length Cdecl Alias "HC_Show_Conditions_Length"(length As HC_INTEGER Ptr) 
Declare Sub HC_QShow_Conditions_Length Cdecl Alias "HC_QShow_Conditions_Length"(segment As HC_STRING, length As HC_INTEGER Ptr) 
Declare Sub HC_Show_Net_Conditions_Length Cdecl Alias "HC_Show_Net_Conditions_Length"(length As HC_INTEGER Ptr) 
Declare Sub HC_QShow_Net_Conditions_Length Cdecl Alias "HC_QShow_Net_Conditions_Length"(segment As HC_STRING, length As HC_INTEGER Ptr) 
Declare Sub HC_PShow_Net_Conditions_Length Cdecl Alias "HC_PShow_Net_Conditions_Length"(count As HC_INTEGER, keys As HC_KEY Ptr, length As HC_INTEGER Ptr) 
Declare Sub HC_Show_One_Condition Cdecl Alias "HC_Show_One_Condition"(condition As HC_STRING, value As HC_STRING) 
Declare Sub HC_QShow_One_Condition Cdecl Alias "HC_QShow_One_Condition"(segment As HC_STRING, condition As HC_STRING, value As HC_STRING) 
Declare Sub HC_Show_One_Net_Condition Cdecl Alias "HC_Show_One_Net_Condition"(condition As HC_STRING, value As HC_STRING) 
Declare Sub HC_QShow_One_Net_Condition Cdecl Alias "HC_QShow_One_Net_Condition"(segment As HC_STRING, condition As HC_STRING, value As HC_STRING) 
Declare Sub HC_PShow_One_Net_Condition Cdecl Alias "HC_PShow_One_Net_Condition"(count As HC_INTEGER, keys As HC_KEY Ptr, condition As HC_STRING, value As HC_STRING) 
Declare Sub HC_Show_Cutting_Plane Cdecl Alias "HC_Show_Cutting_Plane"(key As HC_KEY, a As HC_SINGLE Ptr, b As HC_SINGLE Ptr, c As HC_SINGLE Ptr, d As HC_SINGLE Ptr) 
Declare Sub HC_DShow_Cutting_Plane Cdecl Alias "HC_DShow_Cutting_Plane"(key As HC_KEY, a As HC_SINGLE Ptr, b As HC_SINGLE Ptr, c As HC_SINGLE Ptr, d As HC_SINGLE Ptr) 
Declare Sub HC_Show_Cutting_Section Cdecl Alias "HC_Show_Cutting_Section"(key As HC_KEY, count As HC_INTEGER Ptr, planes As HC_SINGLE Ptr) 
' repe? Declare Sub HC_Show_Cutting_Section Cdecl Alias "Declare Sub HC_Show_Cutting_Section"(key As HC_KEY, count As HC_INTEGER Ptr) 
Declare Sub HC_Show_Cylinder Cdecl Alias "HC_Show_Cylinder"(key As HC_KEY, p1 As HC_POINT Ptr, p2 As HC_POINT Ptr, radius As HC_SINGLE Ptr, cap As HC_STRING) 
Declare Sub HC_DShow_Distant_Light Cdecl Alias "HC_DShow_Distant_Light"(key As HC_KEY, di As HC_SINGLE Ptr, dj As HC_SINGLE Ptr, dk As HC_SINGLE Ptr) 
Declare Sub HC_PShow_Net_Driver_Options Cdecl Alias "HC_PShow_Net_Driver_Options"(count As HC_INTEGER, keys As HC_KEY Ptr, list As HC_STRING) 
Declare Sub HC_PShow_One_Net_Driver_Option Cdecl Alias "HC_PShow_One_Net_Driver_Option"(count As HC_INTEGER, keys As HC_KEY Ptr, tipo As HC_STRING, value As HC_STRING) 
Declare Sub HC_PShow_Net_Edge_Pattern Cdecl Alias "HC_PShow_Net_Edge_Pattern"(count As HC_INTEGER, keys As HC_KEY Ptr, pattern As HC_STRING) 
Declare Sub HC_PShow_Net_Edge_Weight Cdecl Alias "HC_PShow_Net_Edge_Weight"(count As HC_INTEGER, keys As HC_KEY Ptr, weight As HC_SINGLE Ptr) 
Declare Sub HC_DShow_Ellipse Cdecl Alias "HC_DShow_Ellipse"(key As HC_KEY, center As HC_POINT Ptr, major As HC_POINT Ptr, minor As HC_POINT Ptr) 
Declare Sub HC_DShow_Elliptical_Arc Cdecl Alias "HC_DShow_Elliptical_Arc"(key As HC_KEY, center As HC_POINT Ptr, major As HC_POINT Ptr, minor As HC_POINT Ptr, start As HC_SINGLE Ptr, fin As HC_SINGLE Ptr) 
Declare Function HC_Show_Error Cdecl Alias "HC_Show_Error"(severity As HC_STRING, category As HC_INTEGER Ptr, severity_level As HC_INTEGER Ptr) As HC_BOOLEAN 
Declare Sub HC_Show_Event Cdecl Alias "HC_Show_Event"(event_type As HC_STRING) 
Declare Function HC_Show_Existence_By_Key Cdecl Alias "HC_Show_Existence_By_Key"(key As HC_KEY, filter As HC_STRING) As HC_INTEGER
Declare Sub HC_Show_Faces Cdecl Alias "HC_Show_Faces"(face_count As HC_INTEGER Ptr, faces As HC_INTEGER Ptr) 
Declare Sub HC_Show_Faces_Count Cdecl Alias "HC_Show_Faces_Count"(face_count As HC_INTEGER Ptr) 
Declare Sub HC_PShow_Net_Face_Pattern Cdecl Alias "HC_PShow_Net_Face_Pattern"(count As HC_INTEGER, keys As HC_KEY Ptr, pattern As HC_STRING) 
Declare Sub HC_Show_Geometry_Options Cdecl Alias "HC_Show_Geometry_Options"(key As HC_KEY, list As HC_STRING) 
Declare Sub HC_Show_Geometry_Pointer Cdecl Alias "HC_Show_Geometry_Pointer"(key As HC_KEY, data_type As HC_STRING, value As HC_INTEGER Ptr) 
Declare Sub HC_Show_Glyph Cdecl Alias "HC_Show_Glyph"(nombre As HC_STRING, dato As HC_STRING) 
Declare Sub HC_Show_Glyph_Size Cdecl Alias "HC_Show_Glyph_Size"(nombre As HC_STRING, data_size As HC_INTEGER Ptr) 
Declare Sub HC_Show_Grid Cdecl Alias "HC_Show_Grid"(key As HC_KEY, tipo As HC_STRING, origin As HC_POINT Ptr, ref1 As HC_POINT Ptr, ref2 As HC_POINT Ptr, count1 As HC_INTEGER Ptr, count2 As HC_INTEGER Ptr) 
Declare Sub HC_DShow_Grid Cdecl Alias "HC_DShow_Grid"(key As HC_KEY, tipo As HC_STRING, origin As HC_POINT Ptr, ref1 As HC_POINT Ptr, ref2 As HC_POINT Ptr, count1 As HC_INTEGER Ptr, count2 As HC_INTEGER Ptr) 
Declare Sub HC_PShow_Net_Handedness Cdecl Alias "HC_PShow_Net_Handedness"(count As HC_INTEGER, keys As HC_KEY Ptr, value As HC_STRING) 
Declare Sub HC_PShow_Net_Heuristics Cdecl Alias "HC_PShow_Net_Heuristics"(count As HC_INTEGER, keys As HC_KEY Ptr, list As HC_STRING) 
Declare Sub HC_PShow_One_Net_Heuristic Cdecl Alias "HC_PShow_One_Net_Heuristic"(count As HC_INTEGER, keys As HC_KEY Ptr, tipo As HC_STRING, value As HC_STRING) 
Declare Sub HC_Show_Image Cdecl Alias "HC_Show_Image"(key As HC_KEY, x As HC_SINGLE Ptr, y As HC_SINGLE Ptr, z As HC_SINGLE Ptr, Formato As HC_STRING, width_ As HC_INTEGER Ptr, height As HC_INTEGER Ptr, dato As HC_PIXEL Ptr) 
Declare Sub HC_Show_Image_Size Cdecl Alias "HC_Show_Image_Size"(key As HC_KEY, x As HC_SINGLE Ptr, y As HC_SINGLE Ptr, z As HC_SINGLE Ptr, Formato As HC_STRING, width_ As HC_INTEGER Ptr, height As HC_INTEGER Ptr) 
Declare Sub HC_Show_Partial_Image Cdecl Alias "HC_Show_Partial_Image"(key As HC_KEY, xpos As HC_INTEGER, ypos As HC_INTEGER, xlen As HC_INTEGER, ylen As HC_INTEGER, dato As HC_PIXEL Ptr) 
Declare Sub HC_DShow_Image Cdecl Alias "HC_DShow_Image"(key As HC_KEY, x As HC_SINGLE Ptr, y As HC_SINGLE Ptr, z As HC_SINGLE Ptr, Formato As HC_STRING, width_ As HC_INTEGER Ptr, height As HC_INTEGER Ptr, dato As HC_PIXEL Ptr) 
Declare Function HC_KShow_Include_Segment Cdecl Alias "HC_KShow_Include_Segment"(key As HC_KEY) As HC_KEY 
Declare Sub HC_Show_Key_Status Cdecl Alias "HC_Show_Key_Status"(key As HC_KEY, status As HC_STRING) 
Declare Sub HC_DShow_Line Cdecl Alias "HC_DShow_Line"(key As HC_KEY, xa As HC_SINGLE Ptr, ya As HC_SINGLE Ptr, za As HC_SINGLE Ptr, xb As HC_SINGLE Ptr, yb As HC_SINGLE Ptr, zb As HC_SINGLE Ptr) 
Declare Sub HC_PShow_Net_Line_Pattern Cdecl Alias "HC_PShow_Net_Line_Pattern"(count As HC_INTEGER, keys As HC_KEY Ptr, pattern As HC_STRING) 
Declare Sub HC_PShow_Net_Line_Weight Cdecl Alias "HC_PShow_Net_Line_Weight"(count As HC_INTEGER, keys As HC_KEY Ptr, weight As HC_SINGLE Ptr) 
Declare Sub HC_Show_Local_Light Cdecl Alias "HC_Show_Local_Light"(key As HC_KEY, x As HC_SINGLE Ptr, y As HC_SINGLE Ptr, z As HC_SINGLE Ptr) 
Declare Sub HC_DShow_Local_Light Cdecl Alias "HC_DShow_Local_Light"(key As HC_KEY, x As HC_SINGLE Ptr, y As HC_SINGLE Ptr, z As HC_SINGLE Ptr) 
Declare Sub HC_Show_Local_Texture Cdecl Alias "HC_Show_Local_Texture"(texture_name As HC_STRING, definition As HC_STRING) 
Declare Sub HC_Show_LOD_Type Cdecl Alias "HC_Show_LOD_Type"(key As HC_KEY, level As HC_INTEGER, tipo As HC_STRING) 
Declare Sub HC_DShow_Marker Cdecl Alias "HC_DShow_Marker"(key As HC_KEY, x As HC_SINGLE Ptr, y As HC_SINGLE Ptr, z As HC_SINGLE Ptr) 
Declare Sub HC_PShow_Net_Marker_Size Cdecl Alias "HC_PShow_Net_Marker_Size"(count As HC_INTEGER, keys As HC_KEY Ptr, size As HC_SINGLE Ptr) 
Declare Sub HC_PShow_Net_Marker_Symbol Cdecl Alias "HC_PShow_Net_Marker_Symbol"(count As HC_INTEGER, keys As HC_KEY Ptr, symbol As HC_STRING) 
Declare Sub HC_Show_Mesh Cdecl Alias "HC_Show_Mesh"(key As HC_KEY, rows As HC_INTEGER Ptr, columns As HC_INTEGER Ptr, puntos As HC_POINT Ptr) 
Declare Sub HC_Show_Mesh_Size Cdecl Alias "HC_Show_Mesh_Size"(key As HC_KEY, rows As HC_INTEGER Ptr, columns As HC_INTEGER Ptr) 
Declare Sub HC_Show_Partial_Mesh Cdecl Alias "HC_Show_Partial_Mesh"(key As HC_KEY, row_offset As HC_INTEGER, col_offset As HC_INTEGER, row_count As HC_INTEGER, col_count As HC_INTEGER, puntos As HC_POINT Ptr) 
Declare Sub HC_DShow_Mesh Cdecl Alias "HC_DShow_Mesh"(key As HC_KEY, rows As HC_INTEGER Ptr, columns As HC_INTEGER Ptr, puntos As HC_POINT Ptr) 
Declare Sub HC_PShow_Net_Metafile Cdecl Alias "HC_PShow_Net_Metafile"(count As HC_INTEGER, keys As HC_KEY Ptr, options As HC_STRING) 
Declare Sub HC_PShow_One_Net_Metafile Cdecl Alias "HC_PShow_One_Net_Metafile"(count As HC_INTEGER, keys As HC_KEY Ptr, tipo As HC_STRING, value As HC_STRING) 
Declare Sub HC_PShow_Net_Modelling_Matrix Cdecl Alias "HC_PShow_Net_Modelling_Matrix"(count As HC_INTEGER, keys As HC_KEY Ptr, matrix As HC_SINGLE Ptr) 
Declare Sub HC_Show_Net_Camera_Near_Limit Cdecl Alias "HC_Show_Net_Camera_Near_Limit"(wlimit As HC_SINGLE Ptr) 
Declare Sub HC_QShow_Net_Camera_Near_Limit Cdecl Alias "HC_QShow_Net_Camera_Near_Limit"(segment As HC_STRING, wlimit As HC_SINGLE Ptr) 
Declare Sub HC_PShow_Net_Camera_Near_Limit Cdecl Alias "HC_PShow_Net_Camera_Near_Limit"(key_count As HC_INTEGER, keys As HC_KEY Ptr, wlimit As HC_SINGLE Ptr) 
Declare Sub HC_Show_Net_Unicode_Opt_Length Cdecl Alias "HC_Show_Net_Unicode_Opt_Length"(length As HC_INTEGER Ptr) 
Declare Sub HC_PShow_Net_Unicode_Opt_Length Cdecl Alias "HC_PShow_Net_Unicode_Opt_Length"(key_count As HC_INTEGER, keys As HC_KEY Ptr, length As HC_INTEGER Ptr) 
Declare Sub HC_QShow_Net_Unicode_Opt_Length Cdecl Alias "HC_QShow_Net_Unicode_Opt_Length"(segment As HC_STRING, length As HC_INTEGER Ptr) 
Declare Sub HC_Show_One_Uni_Option_Length Cdecl Alias "HC_Show_One_Uni_Option_Length"(text As HC_PIXEL Ptr, length As HC_INTEGER Ptr) 
Declare Sub HC_QShow_One_Uni_Option_Length Cdecl Alias "HC_QShow_One_Uni_Option_Length"(segment As HC_STRING, text As HC_PIXEL Ptr, length As HC_INTEGER Ptr) 
Declare Sub HC_Show_One_Net_Uni_Opt_Len Cdecl Alias "HC_Show_One_Net_Uni_Opt_Len"(text As HC_PIXEL Ptr, length As HC_INTEGER Ptr) 
Declare Sub HC_QShow_One_Net_Uni_Opt_Len Cdecl Alias "HC_QShow_One_Net_Uni_Opt_Len"(segment As HC_STRING, text As HC_PIXEL Ptr, length As HC_INTEGER Ptr) 
Declare Sub HC_PShow_One_Net_Uni_Opt_Len Cdecl Alias "HC_PShow_One_Net_Uni_Opt_Len"(key_count As HC_INTEGER, keys As HC_KEY Ptr, text As HC_PIXEL Ptr, length As HC_INTEGER Ptr) 
Declare Sub HC_Show_Net_User_Opt_Length Cdecl Alias "HC_Show_Net_User_Opt_Length"(length As HC_INTEGER Ptr) 
Declare Sub HC_PShow_Net_User_Opt_Length Cdecl Alias "HC_PShow_Net_User_Opt_Length"(key_count As HC_INTEGER, keys As HC_KEY Ptr, length As HC_INTEGER Ptr) 
Declare Sub HC_QShow_Net_User_Opt_Length Cdecl Alias "HC_QShow_Net_User_Opt_Length"(segment As HC_STRING, length As HC_INTEGER Ptr) 
Declare Sub HC_Show_Normal Cdecl Alias "HC_Show_Normal"(x As HC_SINGLE Ptr, y As HC_SINGLE Ptr, z As HC_SINGLE Ptr) 
Declare Sub HC_Show_Net_Normal Cdecl Alias "HC_Show_Net_Normal"(x As HC_SINGLE Ptr, y As HC_SINGLE Ptr, z As HC_SINGLE Ptr) 
Declare Sub HC_Show_NURBS_Curve Cdecl Alias "HC_Show_NURBS_Curve"(key As HC_KEY, degree As HC_INTEGER Ptr, cp_count As HC_INTEGER Ptr, puntos As HC_POINT Ptr, weights As HC_SINGLE Ptr, knots As HC_SINGLE Ptr, start_u As HC_SINGLE Ptr, end_u As HC_SINGLE Ptr) 
Declare Sub HC_Show_NURBS_Curve_Size Cdecl Alias "HC_Show_NURBS_Curve_Size"(key As HC_KEY, degree As HC_INTEGER Ptr, cp_count As HC_INTEGER Ptr, weight_count As HC_INTEGER Ptr, knot_count As HC_INTEGER Ptr) 
Declare Sub HC_DShow_NURBS_Curve Cdecl Alias "HC_DShow_NURBS_Curve"(key As HC_KEY, degree As HC_INTEGER Ptr, cp_count As HC_INTEGER Ptr, puntos As HC_POINT Ptr, weights As HC_SINGLE Ptr, knots As HC_SINGLE Ptr, start_u As HC_SINGLE Ptr, end_u As HC_SINGLE Ptr) 
Declare Sub HC_Show_NURBS_Surface Cdecl Alias "HC_Show_NURBS_Surface"(key As HC_KEY, u_degree As HC_INTEGER Ptr, v_degree As HC_INTEGER Ptr, u_count As HC_INTEGER Ptr, v_count As HC_INTEGER Ptr, puntos As HC_POINT Ptr, weights As HC_SINGLE Ptr, u_knots As HC_SINGLE Ptr, v_knots As HC_SINGLE Ptr) 
Declare Sub HC_Show_NURBS_Surface_Size Cdecl Alias "HC_Show_NURBS_Surface_Size"(key As HC_KEY, u_degree As HC_INTEGER Ptr, v_degree As HC_INTEGER Ptr, u_count As HC_INTEGER Ptr, v_count As HC_INTEGER Ptr, weights_count As HC_INTEGER Ptr, u_knots_count As HC_INTEGER Ptr, v_knots_count As HC_INTEGER Ptr) 
Declare Sub HC_PShow_One_Net_Color Cdecl Alias "HC_PShow_One_Net_Color"(count As HC_INTEGER, keys As HC_KEY Ptr, tipo As HC_STRING, color_ As HC_STRING) 
Declare Sub HC_PShow_One_Net_Color_By_Index Cdecl Alias "HC_PShow_One_Net_Color_By_Index"(count As HC_INTEGER, keys As HC_KEY Ptr, tipo As HC_STRING, index As HC_INTEGER Ptr) 
Declare Sub HC_PShow_One_Net_Color_By_Value Cdecl Alias "HC_PShow_One_Net_Color_By_Value"(count As HC_INTEGER, keys As HC_KEY Ptr, tipo As HC_STRING, color_space As HC_STRING, a As HC_SINGLE Ptr, b As HC_SINGLE Ptr, c As HC_SINGLE Ptr) 
Declare Sub HC_PShow_One_Net_Color_Map Cdecl Alias "HC_PShow_One_Net_Color_Map"(count As HC_INTEGER, keys As HC_KEY Ptr, offset As HC_INTEGER, color_ As HC_STRING) 
Declare Sub HC_PShow_One_Net_Color_Map_By_V Cdecl Alias "HC_PShow_One_Net_Color_Map_By_V"(count As HC_INTEGER, keys As HC_KEY Ptr, offset As HC_INTEGER, color_space As HC_STRING, a As HC_SINGLE Ptr, b As HC_SINGLE Ptr, c As HC_SINGLE Ptr) 
Declare Function HC_KShow_Owner_Original_Key Cdecl Alias "HC_KShow_Owner_Original_Key"(key As HC_KEY) As HC_KEY 
Declare Sub HC_Show_Parameter Cdecl Alias "HC_Show_Parameter"(size As HC_INTEGER Ptr, list As HC_SINGLE Ptr) 
Declare Sub HC_Show_Parameter_Size Cdecl Alias "HC_Show_Parameter_Size"(size As HC_INTEGER Ptr) 
Declare Sub HC_DShow_Polygon Cdecl Alias "HC_DShow_Polygon"(key As HC_KEY, count As HC_INTEGER Ptr, puntos As HC_POINT Ptr) 
Declare Sub HC_DShow_Polyline Cdecl Alias "HC_DShow_Polyline"(key As HC_KEY, count As HC_INTEGER Ptr, puntos As HC_POINT Ptr) 
Declare Sub HC_Show_PolyCylinder Cdecl Alias "HC_Show_PolyCylinder"(key As HC_KEY, p_count As HC_INTEGER Ptr, pts As HC_POINT Ptr, r_count As HC_INTEGER Ptr, radii As HC_SINGLE Ptr, capping As HC_STRING) 
Declare Sub HC_Show_PolyCylinder_Counts Cdecl Alias "HC_Show_PolyCylinder_Counts"(key As HC_KEY, p_count As HC_INTEGER Ptr, r_count As HC_INTEGER Ptr, capping As HC_STRING) 
Declare Sub HC_Show_Priority Cdecl Alias "HC_Show_Priority"(key As HC_KEY, priority As Long Ptr) 
Declare Sub HC_Show_Region Cdecl Alias "HC_Show_Region"(region As HC_INTEGER Ptr) 
Declare Sub HC_Show_Region_Range Cdecl Alias "HC_Show_Region_Range"(key As HC_KEY, lowest As HC_INTEGER Ptr, highest As HC_INTEGER Ptr) 
Declare Sub HC_Show_Rendering_Options Cdecl Alias "HC_Show_Rendering_Options"(list As HC_STRING) 
Declare Sub HC_QShow_Rendering_Options Cdecl Alias "HC_QShow_Rendering_Options"(segment As HC_STRING, list As HC_STRING) 
Declare Sub HC_Show_One_Rendering_Option Cdecl Alias "HC_Show_One_Rendering_Option"(tipo As HC_STRING, value As HC_STRING) 
Declare Sub HC_QShow_One_Rendering_Option Cdecl Alias "HC_QShow_One_Rendering_Option"(segment As HC_STRING, tipo As HC_STRING, value As HC_STRING) 
Declare Sub HC_Show_Net_Rendering_Options Cdecl Alias "HC_Show_Net_Rendering_Options"(list As HC_STRING) 
Declare Sub HC_PShow_Net_Rendering_Options Cdecl Alias "HC_PShow_Net_Rendering_Options"(count As HC_INTEGER, keys As HC_KEY Ptr, list As HC_STRING) 
Declare Sub HC_QShow_Net_Rendering_Options Cdecl Alias "HC_QShow_Net_Rendering_Options"(segment As HC_STRING, list As HC_STRING) 
Declare Sub HC_Show_One_Net_Rendering_Optio Cdecl Alias "HC_Show_One_Net_Rendering_Optio"(tipo As HC_STRING, value As HC_STRING) 
Declare Sub HC_PShow_One_Net_Rendering_Opti Cdecl Alias "HC_PShow_One_Net_Rendering_Opti"(count As HC_INTEGER, keys As HC_KEY Ptr, tipo As HC_STRING, value As HC_STRING) 
Declare Sub HC_QShow_One_Net_Rendering_Opti Cdecl Alias "HC_QShow_One_Net_Rendering_Opti"(segment As HC_STRING, tipo As HC_STRING, value As HC_STRING) 
Declare Sub HC_PShow_Net_Selectability Cdecl Alias "HC_PShow_Net_Selectability"(count As HC_INTEGER, keys As HC_KEY Ptr, list As HC_STRING) 
Declare Sub HC_PShow_One_Net_Selectability Cdecl Alias "HC_PShow_One_Net_Selectability"(count As HC_INTEGER, keys As HC_KEY Ptr, tipo As HC_STRING, value As HC_STRING) 
Declare Sub HC_Show_Selection_Element Cdecl Alias "HC_Show_Selection_Element"(key As HC_KEY Ptr, offset1 As HC_INTEGER Ptr, offset2 As HC_INTEGER Ptr, offset3 As HC_INTEGER Ptr) 
Declare Sub HC_Show_Selection_Elements Cdecl Alias "HC_Show_Selection_Elements"(key As HC_KEY Ptr, count As HC_INTEGER Ptr, offsets1 As HC_INTEGER Ptr, offsets2 As HC_INTEGER Ptr, offsets3 As HC_INTEGER Ptr) 
Declare Sub HC_Show_Selection_Elements_Coun Cdecl Alias "HC_Show_Selection_Elements_Coun"(key As HC_KEY Ptr, count As HC_INTEGER Ptr) 
Declare Sub HC_Show_Selection_Keys Cdecl Alias "HC_Show_Selection_Keys"(count As HC_INTEGER Ptr, keys As HC_KEY Ptr) 
Declare Sub HC_Show_Selection_Keys_Count Cdecl Alias "HC_Show_Selection_Keys_Count"(count As HC_INTEGER Ptr) 
Declare Sub HC_Show_Selection_Original_Key Cdecl Alias "HC_Show_Selection_Original_Key"(key As HC_KEY Ptr) 
Declare Sub HC_Show_Selection_Original_Keys Cdecl Alias "HC_Show_Selection_Original_Keys"(count As HC_INTEGER Ptr, key As HC_KEY Ptr) 
Declare Sub HC_Show_Selection_Position Cdecl Alias "HC_Show_Selection_Position"(window_x As HC_SINGLE Ptr, window_y As HC_SINGLE Ptr, window_z As HC_SINGLE Ptr, camera_x As HC_SINGLE Ptr, camera_y As HC_SINGLE Ptr, camera_z As HC_SINGLE Ptr) 
Declare Sub HC_Show_Shell Cdecl Alias "HC_Show_Shell"(key As HC_KEY, pcount As HC_INTEGER Ptr, puntos As HC_POINT Ptr, flist_length As HC_INTEGER Ptr, face_list As HC_INTEGER Ptr) 
Declare Sub HC_Show_Shell_Size Cdecl Alias "HC_Show_Shell_Size"(key As HC_KEY, pcount As HC_INTEGER Ptr, flist_length As HC_INTEGER Ptr) 
Declare Sub HC_Show_Partial_Shell_Size Cdecl Alias "HC_Show_Partial_Shell_Size"(key As HC_KEY, foffset As HC_INTEGER, fcnt As HC_INTEGER, flist_length As HC_INTEGER Ptr) 
Declare Sub HC_Show_Partial_Shell Cdecl Alias "HC_Show_Partial_Shell"(key As HC_KEY, voffset As HC_INTEGER, vcnt As HC_INTEGER, puntos As HC_POINT Ptr, foffset As HC_INTEGER, fcnt As HC_INTEGER, flist_length As HC_INTEGER Ptr, face_list As HC_INTEGER Ptr) 
Declare Sub HC_DShow_Shell Cdecl Alias "HC_DShow_Shell"(key As HC_KEY, pcount As HC_INTEGER Ptr, puntos As HC_POINT Ptr, flist_length As HC_INTEGER Ptr, face_list As HC_INTEGER Ptr) 
Declare Sub HC_Show_Shell_By_Tristrips Cdecl Alias "HC_Show_Shell_By_Tristrips"(key As HC_KEY, pcount As HC_INTEGER Ptr, puntos As HC_POINT Ptr, tristrips_length As HC_INTEGER Ptr, tristrips As HC_INTEGER Ptr, face_indices_length As HC_INTEGER Ptr, face_indices As HC_INTEGER Ptr) 
Declare Sub HC_Show_Shell_By_Tristrips_Size Cdecl Alias "HC_Show_Shell_By_Tristrips_Size"(key As HC_KEY, pcount As HC_INTEGER Ptr, tristrips_length As HC_INTEGER Ptr, face_indices_length As HC_INTEGER Ptr) 
Declare Sub HC_Show_Spot_Light Cdecl Alias "HC_Show_Spot_Light"(key As HC_KEY, position As HC_POINT Ptr, objetivo As HC_POINT Ptr, list As HC_STRING) 
Declare Sub HC_DShow_Spot_Light Cdecl Alias "HC_DShow_Spot_Light"(key As HC_KEY, position As HC_POINT Ptr, objetivo As HC_POINT Ptr, list As HC_STRING) 
Declare Sub HC_PShow_Net_Streaming_Mode Cdecl Alias "HC_PShow_Net_Streaming_Mode"(count As HC_INTEGER, keys As HC_KEY Ptr, flag As HC_STRING) 
Declare Sub HC_Show_String_Count Cdecl Alias "HC_Show_String_Count"(count As HC_INTEGER Ptr) 
Declare Sub HC_Show_String_Length Cdecl Alias "HC_Show_String_Length"(length As HC_INTEGER Ptr) 
Declare Sub HC_Show_String_With_Encoding Cdecl Alias "HC_Show_String_With_Encoding"(encoding As HC_STRING, text As HC_STRING) 
Declare Function HC_KShow_Style_Segment Cdecl Alias "HC_KShow_Style_Segment"(key As HC_KEY) As HC_KEY 
Declare Sub HC_Show_System_Info Cdecl Alias "HC_Show_System_Info"(tipo As HC_STRING, value As HC_STRING) 
Declare Sub HC_Show_Text_Count Cdecl Alias "HC_Show_Text_Count"(key As HC_KEY, count As HC_INTEGER Ptr) 
Declare Sub HC_Show_Text_Encoding Cdecl Alias "HC_Show_Text_Encoding"(key As HC_KEY, encoding_ As HC_STRING) 
Declare Sub HC_Show_Text_With_Encoding Cdecl Alias "HC_Show_Text_With_Encoding"(key As HC_KEY, x As HC_SINGLE Ptr, y As HC_SINGLE Ptr, z As HC_SINGLE Ptr, encoding_ As HC_STRING, text As HC_STRING) 
Declare Sub HC_DShow_Text Cdecl Alias "HC_DShow_Text"(key As HC_KEY, x As HC_SINGLE Ptr, y As HC_SINGLE Ptr, z As HC_SINGLE Ptr, text As HC_STRING) 
Declare Sub HC_DShow_Text_With_Encoding Cdecl Alias "HC_DShow_Text_With_Encoding"(key As HC_KEY, x As HC_SINGLE Ptr, y As HC_SINGLE Ptr, z As HC_SINGLE Ptr, encoding_ As HC_STRING, text As HC_STRING) 
Declare Sub HC_Show_Texture Cdecl Alias "HC_Show_Texture"(texture As HC_STRING, definition As HC_STRING) 
Declare Sub HC_Show_Texture_Matrix Cdecl Alias "HC_Show_Texture_Matrix"(matrix As HC_SINGLE Ptr) 
Declare Sub HC_QShow_Texture_Matrix Cdecl Alias "HC_QShow_Texture_Matrix"(segment As HC_STRING, matrix As HC_SINGLE Ptr) 
Declare Sub HC_Show_Net_Texture_Matrix Cdecl Alias "HC_Show_Net_Texture_Matrix"(matrix As HC_SINGLE Ptr) 
Declare Sub HC_PShow_Net_Texture_Matrix Cdecl Alias "HC_PShow_Net_Texture_Matrix"(count As HC_INTEGER, keys As HC_KEY Ptr, matrix As HC_SINGLE Ptr) 
Declare Sub HC_QShow_Net_Texture_Matrix Cdecl Alias "HC_QShow_Net_Texture_Matrix"(segment As HC_STRING, matrix As HC_SINGLE Ptr) 
Declare Sub HC_PShow_Net_Text_Alignment Cdecl Alias "HC_PShow_Net_Text_Alignment"(count As HC_INTEGER, keys As HC_KEY Ptr, locater As HC_STRING) 
Declare Sub HC_PShow_Net_Text_Font Cdecl Alias "HC_PShow_Net_Text_Font"(count As HC_INTEGER, keys As HC_KEY Ptr, options As HC_STRING) 
Declare Sub HC_PShow_One_Net_Text_Font Cdecl Alias "HC_PShow_One_Net_Text_Font"(count As HC_INTEGER, keys As HC_KEY Ptr, tipo As HC_STRING, value As HC_STRING) 
Declare Sub HC_PShow_Net_Text_Path Cdecl Alias "HC_PShow_Net_Text_Path"(count As HC_INTEGER, keys As HC_KEY Ptr, x As HC_SINGLE Ptr, y As HC_SINGLE Ptr, z As HC_SINGLE Ptr) 
Declare Sub HC_Show_Text_Region Cdecl Alias "HC_Show_Text_Region"(count As HC_INTEGER Ptr, puntos As HC_POINT Ptr, options As HC_STRING) 
Declare Sub HC_Show_Text_Region_Count Cdecl Alias "HC_Show_Text_Region_Count"(count As HC_INTEGER Ptr) 
Declare Sub HC_PShow_Net_Text_Spacing Cdecl Alias "HC_PShow_Net_Text_Spacing"(count As HC_INTEGER, keys As HC_KEY Ptr, spacing As HC_SINGLE Ptr) 
Declare Sub HC_Show_Unicode_Options Cdecl Alias "HC_Show_Unicode_Options"(options As HC_PIXEL Ptr) 
Declare Sub HC_Show_Net_Unicode_Options Cdecl Alias "HC_Show_Net_Unicode_Options"(options As HC_PIXEL Ptr) 
Declare Sub HC_Show_One_Unicode_Option Cdecl Alias "HC_Show_One_Unicode_Option"(requestedOption As HC_PIXEL Ptr, options As HC_PIXEL Ptr) 
Declare Sub HC_Show_One_Net_Unicode_Option Cdecl Alias "HC_Show_One_Net_Unicode_Option"(requestedOption As HC_PIXEL Ptr, options As HC_PIXEL Ptr) 
Declare Sub HC_QShow_Unicode_Options Cdecl Alias "HC_QShow_Unicode_Options"(segment As HC_STRING, options As HC_PIXEL Ptr) 
Declare Sub HC_QShow_Net_Unicode_Options Cdecl Alias "HC_QShow_Net_Unicode_Options"(segment As HC_STRING, options As HC_PIXEL Ptr) 
Declare Sub HC_QShow_One_Unicode_Option Cdecl Alias "HC_QShow_One_Unicode_Option"(segment As HC_STRING, requestedOption As HC_PIXEL Ptr, options As HC_PIXEL Ptr) 
Declare Sub HC_QShow_One_Net_Unicode_Opt Cdecl Alias "HC_QShow_One_Net_Unicode_Opt"(segment As HC_STRING, requestedOption As HC_PIXEL Ptr, options As HC_PIXEL Ptr) 
Declare Sub HC_PShow_One_Net_Unicode_Opt Cdecl Alias "HC_PShow_One_Net_Unicode_Opt"(keyCount As HC_INTEGER, keys As HC_KEY Ptr, requestedOption As HC_PIXEL Ptr, options As HC_PIXEL Ptr) 
Declare Sub HC_PShow_Net_Unicode_Options Cdecl Alias "HC_PShow_Net_Unicode_Options"(keyCount As HC_INTEGER, keys As HC_KEY Ptr, options As HC_PIXEL Ptr) 
Declare Sub HC_Show_Unicode_Options_Length Cdecl Alias "HC_Show_Unicode_Options_Length"(length As HC_INTEGER Ptr) 
Declare Sub HC_QShow_Unicode_Options_Length Cdecl Alias "HC_QShow_Unicode_Options_Length"(segment As HC_STRING, length As HC_INTEGER Ptr) 
Declare Sub HC_Show_Unicode_Text Cdecl Alias "HC_Show_Unicode_Text"(key As HC_KEY, x As HC_SINGLE Ptr, y As HC_SINGLE Ptr, z As HC_SINGLE Ptr, text As HC_PIXEL Ptr) 
Declare Sub HC_Show_User_Indices Cdecl Alias "HC_Show_User_Indices"(count As HC_INTEGER Ptr, indices As Long Ptr, values As HC_INTEGER Ptr) 
Declare Sub HC_QShow_User_Indices Cdecl Alias "HC_QShow_User_Indices"(segment As HC_STRING, count As HC_INTEGER Ptr, indices As Long Ptr, values As HC_INTEGER Ptr) 
Declare Sub HC_Show_Net_User_Indices Cdecl Alias "HC_Show_Net_User_Indices"(count As HC_INTEGER Ptr, indices As Long Ptr, values As HC_INTEGER Ptr) 
Declare Sub HC_PShow_Net_User_Indices Cdecl Alias "HC_PShow_Net_User_Indices"(key_count As HC_INTEGER, keys As HC_KEY Ptr, count As HC_INTEGER Ptr, indices As Long Ptr, values As HC_INTEGER Ptr) 
Declare Sub HC_QShow_Net_User_Indices Cdecl Alias "HC_QShow_Net_User_Indices"(segment As HC_STRING, count As HC_INTEGER Ptr, indices As Long Ptr, values As HC_INTEGER Ptr) 
Declare Sub HC_Show_User_Index_Count Cdecl Alias "HC_Show_User_Index_Count"(count As HC_INTEGER Ptr) 
Declare Sub HC_QShow_User_Index_Count Cdecl Alias "HC_QShow_User_Index_Count"(segment As HC_STRING, count As HC_INTEGER Ptr) 
Declare Sub HC_Show_Net_User_Index_Count Cdecl Alias "HC_Show_Net_User_Index_Count"(count As HC_INTEGER Ptr) 
Declare Sub HC_PShow_Net_User_Index_Count Cdecl Alias "HC_PShow_Net_User_Index_Count"(key_count As HC_INTEGER, keys As HC_KEY Ptr, count As HC_INTEGER Ptr) 
Declare Sub HC_QShow_Net_User_Index_Count Cdecl Alias "HC_QShow_Net_User_Index_Count"(segment As HC_STRING, count As HC_INTEGER Ptr) 
Declare Sub HC_Show_One_User_Index Cdecl Alias "HC_Show_One_User_Index"(index As Long, value As HC_INTEGER Ptr) 
Declare Sub HC_QShow_One_User_Index Cdecl Alias "HC_QShow_One_User_Index"(segment As HC_STRING, index As Long, value As HC_INTEGER Ptr) 
Declare Sub HC_Show_One_Net_User_Index Cdecl Alias "HC_Show_One_Net_User_Index"(index As Long, value As HC_INTEGER Ptr) 
Declare Sub HC_PShow_One_Net_User_Index Cdecl Alias "HC_PShow_One_Net_User_Index"(count As HC_INTEGER, keys As HC_KEY Ptr, index As Long, value As HC_INTEGER Ptr) 
Declare Sub HC_QShow_One_Net_User_Index Cdecl Alias "HC_QShow_One_Net_User_Index"(segment As HC_STRING, index As Long, value As HC_INTEGER Ptr) 
Declare Sub HC_PShow_Net_User_Options Cdecl Alias "HC_PShow_Net_User_Options"(count As HC_INTEGER, keys As HC_KEY Ptr, list As HC_STRING) 
Declare Sub HC_PShow_One_Net_User_Option Cdecl Alias "HC_PShow_One_Net_User_Option"(count As HC_INTEGER, keys As HC_KEY Ptr, tipo As HC_STRING, value As HC_STRING) 
Declare Sub HC_Show_User_Options_Length Cdecl Alias "HC_Show_User_Options_Length"(length As HC_INTEGER Ptr) 
Declare Sub HC_QShow_User_Options_Length Cdecl Alias "HC_QShow_User_Options_Length"(segment As HC_STRING, length As HC_INTEGER Ptr) 
Declare Sub HC_Show_One_User_Option_Length Cdecl Alias "HC_Show_One_User_Option_Length"(which As HC_STRING, length As HC_INTEGER Ptr) 
Declare Sub HC_QShow_One_User_Option_Length Cdecl Alias "HC_QShow_One_User_Option_Length"(segment As HC_STRING, which As HC_STRING, length As HC_INTEGER Ptr) 
Declare Sub HC_Show_One_Net_User_Opt_Len Cdecl Alias "HC_Show_One_Net_User_Opt_Len"(which As HC_STRING, length As HC_INTEGER Ptr) 
Declare Sub HC_QShow_One_Net_User_Opt_Len Cdecl Alias "HC_QShow_One_Net_User_Opt_Len"(segment As HC_STRING, which As HC_STRING, length As HC_INTEGER Ptr) 
Declare Sub HC_PShow_One_Net_User_Opt_Len Cdecl Alias "HC_PShow_One_Net_User_Opt_Len"(key_count As HC_INTEGER, keys As HC_KEY Ptr, which As HC_STRING, length As HC_INTEGER Ptr) 
Declare Sub HC_Show_Variable_Edge_Weight Cdecl Alias "HC_Show_Variable_Edge_Weight"(weight As HC_STRING) 
Declare Sub HC_QShow_Variable_Edge_Weight Cdecl Alias "HC_QShow_Variable_Edge_Weight"(segment As HC_STRING, weight As HC_STRING) 
Declare Sub HC_Show_Net_Variable_Edge_Weight Cdecl Alias "HC_Show_Net_Variable_Edge_Weight"(weight As HC_STRING) 
Declare Sub HC_PShow_Net_Variable_Edge_Weight Cdecl Alias "HC_PShow_Net_Variable_Edge_Weight"(count As HC_INTEGER, keys As HC_KEY Ptr, weight As HC_STRING) 
Declare Sub HC_QShow_Net_Variable_Edge_Weight Cdecl Alias "HC_QShow_Net_Variable_Edge_Weight"(segment As HC_STRING, weight As HC_STRING) 
Declare Sub HC_Show_Variable_Line_Weight Cdecl Alias "HC_Show_Variable_Line_Weight"(weight As HC_STRING) 
Declare Sub HC_QShow_Variable_Line_Weight Cdecl Alias "HC_QShow_Variable_Line_Weight"(segment As HC_STRING, weight As HC_STRING) 
Declare Sub HC_Show_Net_Variable_Line_Weight Cdecl Alias "HC_Show_Net_Variable_Line_Weight"(weight As HC_STRING) 
Declare Sub HC_PShow_Net_Variable_Line_Weight Cdecl Alias "HC_PShow_Net_Variable_Line_Weight"(count As HC_INTEGER, keys As HC_KEY Ptr, weight As HC_STRING) 
Declare Sub HC_QShow_Net_Variable_Line_Weight Cdecl Alias "HC_QShow_Net_Variable_Line_Weight"(segment As HC_STRING, weight As HC_STRING) 
Declare Sub HC_Show_Variable_Marker_Size Cdecl Alias "HC_Show_Variable_Marker_Size"(size As HC_STRING) 
Declare Sub HC_QShow_Variable_Marker_Size Cdecl Alias "HC_QShow_Variable_Marker_Size"(segment As HC_STRING, size As HC_STRING) 
Declare Sub HC_Show_Net_Variable_Marker_Size Cdecl Alias "HC_Show_Net_Variable_Marker_Size"(size As HC_STRING) 
Declare Sub HC_PShow_Net_Variable_Marker_Size Cdecl Alias "HC_PShow_Net_Variable_Marker_Size"(count As HC_INTEGER, keys As HC_KEY Ptr, size As HC_STRING) 
Declare Sub HC_QShow_Net_Variable_Marker_Size Cdecl Alias "HC_QShow_Net_Variable_Marker_Size"(segment As HC_STRING, size As HC_STRING) 
Declare Sub HC_PShow_Net_Visibility Cdecl Alias "HC_PShow_Net_Visibility"(count As HC_INTEGER, keys As HC_KEY Ptr, list As HC_STRING) 
Declare Sub HC_PShow_One_Net_Visibility Cdecl Alias "HC_PShow_One_Net_Visibility"(count As HC_INTEGER, keys As HC_KEY Ptr, tipo As HC_STRING, value As HC_STRING) 
Declare Sub HC_PShow_Net_Window Cdecl Alias "HC_PShow_Net_Window"(count As HC_INTEGER, keys As HC_KEY Ptr, left_ As HC_SINGLE Ptr, right_ As HC_SINGLE Ptr, bottom As HC_SINGLE Ptr, top As HC_SINGLE Ptr) 
Declare Sub HC_PShow_Net_Window_Frame Cdecl Alias "HC_PShow_Net_Window_Frame"(count As HC_INTEGER, keys As HC_KEY Ptr, flag As HC_STRING) 
Declare Sub HC_PShow_Net_Window_Pattern Cdecl Alias "HC_PShow_Net_Window_Pattern"(count As HC_INTEGER, keys As HC_KEY Ptr, pattern As HC_STRING) 
Declare Sub HC_Style_Segment_By_Key Cdecl Alias "HC_Style_Segment_By_Key"(seg_key As HC_KEY) 
Declare Function HC_KStyle_Segment_By_Key Cdecl Alias "HC_KStyle_Segment_By_Key"(seg_key As HC_KEY) As HC_KEY 
Declare Sub HC_Conditional_Style Cdecl Alias "HC_Conditional_Style"(style As HC_STRING, conditions As HC_STRING) 
Declare Function HC_KConditional_Style Cdecl Alias "HC_KConditional_Style"(style As HC_STRING, conditions As HC_STRING) As HC_KEY 
Declare Sub HC_Conditional_Style_By_Key Cdecl Alias "HC_Conditional_Style_By_Key"(seg_key As HC_KEY, conditions As HC_STRING) 
Declare Function HC_KConditional_Style_By_Key Cdecl Alias "HC_KConditional_Style_By_Key"(seg_key As HC_KEY, conditions As HC_STRING) As HC_KEY 
Declare Sub HC_Translate_Texture Cdecl Alias "HC_Translate_Texture"(u As HC_DOUBLE, v As HC_DOUBLE, w As HC_DOUBLE) 
Declare Sub HC_QTranslate_Texture Cdecl Alias "HC_QTranslate_Texture"(segment As HC_STRING, u As HC_DOUBLE, v As HC_DOUBLE, w As HC_DOUBLE) 
Declare Sub HC_UnDefine_Local_Texture Cdecl Alias "HC_UnDefine_Local_Texture"(texture_name As HC_STRING) 
Declare Sub HC_UnSet_Bounding_Volume Cdecl Alias "HC_UnSet_Bounding_Volume"() 
Declare Sub HC_QUnSet_Bounding_Volume Cdecl Alias "HC_QUnSet_Bounding_Volume"(segment As HC_STRING) 
Declare Sub HC_UnSet_Bounding_Volume_By_Key Cdecl Alias "HC_UnSet_Bounding_Volume_By_Key"(key As HC_KEY) 
Declare Function HC_Update_Display_Timed Cdecl Alias "HC_Update_Display_Timed"(time_ As HC_DOUBLE) As HC_BOOLEAN 
Declare Sub HC_Update_One_Display Cdecl Alias "HC_Update_One_Display"(segment As HC_STRING) 
Declare Function HC_Update_One_Display_Timed Cdecl Alias "HC_Update_One_Display_Timed"(segment As HC_STRING, time_ As HC_DOUBLE) As HC_BOOLEAN 
